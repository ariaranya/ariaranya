<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Creative Coding - Practice 2</title>
    <url>/23.html</url>
    <content><![CDATA[<h2 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h2><p>This exercise involves creating a bouncing ball animation that incorporates several important programming concepts such as arrays, conditional logic, and classes. The colorful ball changes color randomly as it bounces, adding a dynamic visual effect to the animation.</p>
<iframe width="600" height="642" src="https://editor.p5js.org/ariaranya/full/j8Gwgh5fD"></iframe>




<h2 id="Code-and-Comments"><a href="#Code-and-Comments" class="headerlink" title="Code and Comments"></a>Code and Comments</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Object Array setting</span></span><br><span class="line"><span class="comment">// declare variable &quot;balls&quot;</span></span><br><span class="line"><span class="comment">// assigning to it an empty array</span></span><br><span class="line"><span class="keyword">let</span> balls = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// runs once, at the start</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// create a canvas in 600 pixels wide and 600 pixels tall</span></span><br><span class="line">   <span class="title function_">createCanvas</span>(<span class="number">600</span>, <span class="number">600</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ball objects using a for loop.</span></span><br><span class="line"><span class="comment">// set up a variable &quot;i&quot;</span></span><br><span class="line"><span class="comment">// let &quot;i&quot; equal to 0</span></span><br><span class="line"><span class="comment">// &quot;i&quot; less than 4,loop through the entire array</span></span><br><span class="line"><span class="comment">// &quot;i&quot;= &quot;i&quot; + 1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// Each Ball object is added to the balls array.</span></span><br><span class="line">    balls[i] = <span class="keyword">new</span> <span class="title class_">Ball</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// loops, after setup has run</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fill background colour - white</span></span><br><span class="line">   <span class="title function_">background</span>(<span class="number">255</span>);</span><br><span class="line">  </span><br><span class="line"><span class="comment">// set up a variable &quot;i&quot;</span></span><br><span class="line"><span class="comment">// let &quot;i&quot; equal to 0</span></span><br><span class="line"><span class="comment">// &quot;i&quot; less than 4,loop through the entire array</span></span><br><span class="line"><span class="comment">// &quot;i&quot;= &quot;i&quot; + 1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// run ball[i], display this function</span></span><br><span class="line">    balls[i].<span class="title function_">display</span>();</span><br><span class="line">    </span><br><span class="line"><span class="comment">// run ball[i], update this function</span></span><br><span class="line">    balls[i].<span class="title function_">update</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// creates a class named &quot;Ball&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ball</span> &#123;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// create a function in the class name &quot;constructor&quot;, it initializes the properties of the ball object with the following values</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// this.x = the centre of canvas width</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">x</span> = width / <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// this.y = the centre of canvas height</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">y</span> = height / <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// this.vx = random number between -3 and 3 - the velocity of the ball in x position</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">vx</span> = <span class="title function_">random</span>(-<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// this.vx = random number between -3 and 3 - the velocity of the ball in y position</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">vy</span> = <span class="title function_">random</span>(-<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// the &quot;col&quot; variable is initialized to a random color using the &quot;color()&quot; function and &quot;random()&quot; values for red, green, and blue</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">col</span> = <span class="title function_">color</span>(<span class="title function_">random</span>(<span class="number">255</span>), <span class="title function_">random</span>(<span class="number">255</span>), <span class="title function_">random</span>(<span class="number">255</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// creates a &quot;display&quot; function in the class </span></span><br><span class="line"><span class="comment">// dislay balls </span></span><br><span class="line">   <span class="title function_">display</span>(<span class="params"></span>) &#123;</span><br><span class="line">     </span><br><span class="line"><span class="comment">// no out lines</span></span><br><span class="line">   <span class="title function_">noStroke</span>();</span><br><span class="line">     </span><br><span class="line"><span class="comment">// fill the colour &quot;this,col&quot; to balls - random colour     </span></span><br><span class="line">   <span class="title function_">fill</span>(<span class="variable language_">this</span>.<span class="property">col</span>);</span><br><span class="line">     </span><br><span class="line"><span class="comment">// draw balls at this.x position and this.y position with diameter 40</span></span><br><span class="line">   <span class="title function_">ellipse</span>(<span class="variable language_">this</span>.<span class="property">x</span>, <span class="variable language_">this</span>.<span class="property">y</span>, <span class="number">40</span>, <span class="number">40</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// creates a &quot;updates&quot; function in the class </span></span><br><span class="line"><span class="comment">// updating the position of balls</span></span><br><span class="line">  <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// if this.x positon is less than 0 or thi.x position is grater than the width of canvas</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">x</span> &lt; <span class="number">0</span> || <span class="variable language_">this</span>.<span class="property">x</span> &gt; width) </span><br><span class="line">    &#123;</span><br><span class="line">      </span><br><span class="line"><span class="comment">// change to a random colour then fill in the ball</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">col</span> = <span class="title function_">color</span>(<span class="title function_">random</span>(<span class="number">255</span>), <span class="title function_">random</span>(<span class="number">255</span>), <span class="title function_">random</span>(<span class="number">255</span>));</span><br><span class="line">      </span><br><span class="line"><span class="comment">// this.vx = this.vx * -1</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">vx</span> *= -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if this.y positon is less than 0 or thi.x position is grater than the height of canvas</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">y</span> &lt; <span class="number">0</span> || <span class="variable language_">this</span>.<span class="property">y</span> &gt; height) &#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// change to a random colour then fill in the ball</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">col</span> = <span class="title function_">color</span>(<span class="title function_">random</span>(<span class="number">255</span>), <span class="title function_">random</span>(<span class="number">255</span>), <span class="title function_">random</span>(<span class="number">255</span>));</span><br><span class="line">    </span><br><span class="line"><span class="comment">// this.vy = this.vy * -1</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">vy</span> *= -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// this.x = this.x + this.vx</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> += <span class="variable language_">this</span>.<span class="property">vx</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// this.y = this.y + this.vy</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> += <span class="variable language_">this</span>.<span class="property">vy</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Reference-Links"><a href="#Reference-Links" class="headerlink" title="Reference Links"></a>Reference Links</h2><p><a href="https://www.youtube.com/watch?v=1c1_TMdf8b8&t=488s">Thomas Capogreco Blog</a></p>
<p><a href="https://www.youtube.com/watch?v=LO3Awjn_gyU">The Coding Train - 3.2: The Bouncing Ball - p5.js Tutorial</a></p>
<p><a href="https://thecodingtrain.com/tracks/code-programming-with-p5-js">The Coding Train - CODE! PROGRAMMING WITH P5.JS</a></p>
]]></content>
      <tags>
        <tag>Practice - Bouncing balls</tag>
      </tags>
  </entry>
  <entry>
    <title>Creative Coding - Practice 3</title>
    <url>/25.html</url>
    <content><![CDATA[<h2 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h2><p>Follow the tutorial from the Coding Train challenge. This maze pattern is inspired by the book ‘10 PRINT CHR$(205.5+RND(1)); : GOTO 10.’ “The book uses a single line of code – the extremely concise BASIC program for the Commodore 64 inscribed in the title – as a lens through which to explore the phenomenon of creative computing and the role of computer programs in culture”, as described in the book’s introduction.I made some modifications to the settings, such as the style and elements, and also incorporated interactive design. When the mouse is clicked, the color will randomly change.</p>
<iframe width="400" height="442" src="https://editor.p5js.org/ariaranya/full/aFiAbc6je"></iframe>





<h2 id="Code-and-Comments"><a href="#Code-and-Comments" class="headerlink" title="Code and Comments"></a>Code and Comments</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// initialize variables</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// set a varible &quot;col&quot;</span></span><br><span class="line"><span class="keyword">let</span> col;</span><br><span class="line"><span class="comment">// x coordinate equals 0, start point of lines</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// y coordinate equals 0, start point of lines</span></span><br><span class="line"><span class="keyword">let</span> y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//set variable &quot;spacing&quot;, represents the distance between each line is 20</span></span><br><span class="line"><span class="keyword">let</span> spacing = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// runs once, at the start</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// create a canvas in 400 pixels wide and 400 pixels tall</span></span><br><span class="line">   <span class="title function_">createCanvas</span>(<span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// set background colour - white</span></span><br><span class="line">   <span class="title function_">background</span>(<span class="number">255</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// the &quot;col&quot; variable is initialized to a random color using the &quot;color()&quot; function and &quot;random()&quot; values for red, green, and blue</span></span><br><span class="line">   col = <span class="title function_">color</span>(<span class="title function_">random</span>(<span class="number">255</span>), <span class="title function_">random</span>(<span class="number">255</span>), <span class="title function_">random</span>(<span class="number">255</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// loops, after setup has run</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// sets the color of the lines to the value of &quot;col&quot;</span></span><br><span class="line">   <span class="title function_">stroke</span>(col);</span><br><span class="line"></span><br><span class="line"><span class="comment">// The if statement randomly decides whether to draw a line from top-left to bottom-right or from top-right to bottom-left.</span></span><br><span class="line"><span class="comment">// If the random number is less than 0.5, it is true, then excutes the frist line function</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">random</span>(<span class="number">1</span>) &lt; <span class="number">0.5</span>) &#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// draw a line that slopes from top-left to bottom-right.</span></span><br><span class="line">    <span class="title function_">line</span>(x, y, x + spacing, y + spacing);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// otherwise, if the random number is greater or equal to 0.5, then excutes following</span></span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// draw a line that slopes from top-right to bottom-left.</span></span><br><span class="line">    <span class="title function_">line</span>(x, y + spacing, x + spacing, y);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The x variable is incremented by spacing at the end of each iteration of the loop, which moves the drawing position to the right by spacing pixels.</span></span><br><span class="line">   x = x + spacing;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if x postion is greater than the width of canvas</span></span><br><span class="line">   <span class="keyword">if</span> (x &gt; width) &#123;</span><br><span class="line"><span class="comment">// reset &quot;x&quot; back to 0</span></span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// then move down to keep drawing</span></span><br><span class="line">    y = y + spacing;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// when mouse pressed at the canvas, reset the lines and color</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mousePressed</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// fill background colour - white</span></span><br><span class="line">   <span class="title function_">background</span>(<span class="number">255</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// the postion of &quot;x&quot; back to 0</span></span><br><span class="line">   x = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the position of &quot;y&quot; back to 0</span></span><br><span class="line">   y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the &quot;col&quot; variable is initialized to a random color using the &quot;color()&quot; function and &quot;random()&quot; values for red, green, and blue</span></span><br><span class="line">   col = <span class="title function_">color</span>(<span class="title function_">random</span>(<span class="number">255</span>), <span class="title function_">random</span>(<span class="number">255</span>), <span class="title function_">random</span>(<span class="number">255</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Reference-Links"><a href="#Reference-Links" class="headerlink" title="Reference Links"></a>Reference Links</h2><p><a href="https://www.youtube.com/watch?v=bEyTZ5ZZxZs">The Coding Train - Coding Challenge #76: 10PRINT in p5.js</a></p>
<p><a href="https://thecodingtrain.com/tracks/code-programming-with-p5-js">The Coding Train - CODE! PROGRAMMING WITH P5.JS</a></p>
]]></content>
      <tags>
        <tag>Practice - Print Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>Assignments 1 p5 Sketch - Banner Design</title>
    <url>/30%20copy.html</url>
    <content><![CDATA[<h2 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h2><p>The technology used in this project is largely derived from previous exercises, with some deepening and refinement of concepts such as variables, iteration, conditional logic, custom functions, arrays, and classes. The inspiration comes from Pop Art, with the use of polka dot elements commonly found in it. However, a vintage color palette was not chosen, as it was desired to express the freshness and youthfulness of college life. The stripe design brought about by mouse dragging represents the keys being pressed, akin to a joyful melody. There is a small garden behind the school library with a piano, where students often go to relax after class. Thus, this concept is a reflection of memories of campus life.</p>
<iframe width="576" height="366" src="https://editor.p5js.org/ariaranya/full/wV6necbHS"></iframe>





<h2 id="Code-and-Comments"><a href="#Code-and-Comments" class="headerlink" title="Code and Comments"></a>Code and Comments</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// declare variable for font</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">DeliciousHandrawn</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// upload font files from sketch files - click the arrow at left corner</span></span><br><span class="line"><span class="comment">// set up preload function </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">preload</span> () &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// load a font file from Fonts folder</span></span><br><span class="line"> <span class="title class_">DeliciousHandrawn</span> = <span class="title function_">loadFont</span>(<span class="string">&#x27;DeliciousHandrawn.ttf&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Object Array setting</span></span><br><span class="line"><span class="comment">// declare variable &quot;Circle&quot;</span></span><br><span class="line"><span class="comment">// assigning to it an empty array</span></span><br><span class="line"><span class="keyword">let</span> circles = [];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object Array setting</span></span><br><span class="line"><span class="comment">// declare variable &quot;rects&quot;</span></span><br><span class="line"><span class="comment">// assigning to it an empty array</span></span><br><span class="line"><span class="keyword">let</span> rects = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// declare a variable &quot;type&quot; Equal to 0</span></span><br><span class="line"><span class="keyword">let</span> type = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// declare a variable &quot;_index&quot; Equal to 0</span></span><br><span class="line"><span class="keyword">let</span> _index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// runs once, at the start</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line"><span class="comment">// create a canvas (576 pixels wide &amp; 324 pixels tall)</span></span><br><span class="line">   <span class="title function_">createCanvas</span>(<span class="number">576</span>, <span class="number">324</span>);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="comment">// for loop, loop according to the width of the Array</span></span><br><span class="line"><span class="comment">// declare a variable &quot;i&quot;</span></span><br><span class="line"><span class="comment">// let &quot;i&quot; equal to 0</span></span><br><span class="line"><span class="comment">// &quot;i&quot; less than width,loop through the entire array</span></span><br><span class="line"><span class="comment">// &quot;i&quot; equal to &quot;i&quot; plus 20</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; width; i += <span class="number">20</span>) &#123;</span><br><span class="line">    </span><br><span class="line"> </span><br><span class="line"><span class="comment">// loop according to the height of the Array</span></span><br><span class="line"><span class="comment">// declare a variable &quot;j&quot;</span></span><br><span class="line"><span class="comment">// let &quot;j&quot; equal to 0</span></span><br><span class="line"><span class="comment">// &quot;j&quot; less than height,loop through the entire array</span></span><br><span class="line"><span class="comment">// &quot;j&quot; equal to &quot;j&quot; plus 20</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; height; j += <span class="number">20</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">// The new Circle instance is added to the circles array</span></span><br><span class="line"><span class="comment">// assigns it to an element in the &quot;circles&quot; array at the index specified by &quot;_index&quot;</span></span><br><span class="line"><span class="comment">// i,j is to define the position</span></span><br><span class="line">   circles[_index] = <span class="keyword">new</span> <span class="title class_">Circle</span>(i, j, type);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// &quot;_index&quot;=&quot;index&quot;+1  </span></span><br><span class="line">   _index++;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">// &quot;type&quot;=&quot;type&quot;+1</span></span><br><span class="line">   type++;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">// if it exceeds 2 (which is the maximum &quot;type&quot; value), it is reset to 0.</span></span><br><span class="line">   <span class="keyword">if</span> (type &gt; <span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line">   type = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// The loop iterates from 0 to 11 and sets the value of each element in the array to a new instance of the Rect class, with a starting x-position of i * 50 (increasing by 50 pixels for each iteration) and a y-position of 0. This creates a row of 12 rectangles horizontally aligned at the top of the canvas.</span></span><br><span class="line"><span class="comment">// declare a variable &quot;i&quot;</span></span><br><span class="line"><span class="comment">// let &quot;i&quot; equal to 0</span></span><br><span class="line"><span class="comment">// &quot;i&quot; less than 12</span></span><br><span class="line"><span class="comment">// &quot;i&quot; = &quot;i&quot;+1</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">   rects[i] = <span class="keyword">new</span> <span class="title class_">Rect</span>(i * <span class="number">50</span>, <span class="number">0</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// loops, after setup has run</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// fill canvas background</span></span><br><span class="line">   <span class="title function_">background</span>(<span class="number">255</span>);</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Loop according to the length of the Array</span></span><br><span class="line"><span class="comment">// set up a variable &quot;i&quot;</span></span><br><span class="line"><span class="comment">// let &quot;i&quot; equal to 0</span></span><br><span class="line"><span class="comment">// &quot;i&quot; less than &quot; Circle&quot; length,loop through the entire array</span></span><br><span class="line"><span class="comment">// &quot;i&quot; =&quot;1&quot;+ 1</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; circles.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// Run Circle[i].update this function</span></span><br><span class="line">   circles[i].<span class="title function_">update</span>();</span><br><span class="line">    </span><br><span class="line"><span class="comment">// Run Circle[i].show this function    </span></span><br><span class="line">   circles[i].<span class="title function_">display</span>();</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Loop according to the length of the Array</span></span><br><span class="line"><span class="comment">// set up a variable &quot;i&quot;</span></span><br><span class="line"><span class="comment">// let &quot;i&quot; equal to 0</span></span><br><span class="line"><span class="comment">// &quot;i&quot; less than &quot; rects&quot; length,loop through the entire array</span></span><br><span class="line"><span class="comment">// &quot;i&quot; =&quot;i&quot;+ 1</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; rects.<span class="property">length</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">// Run &quot;rects&quot;[i].update this function</span></span><br><span class="line">   rects[i].<span class="title function_">update</span>();</span><br><span class="line">    </span><br><span class="line"><span class="comment">// Run &quot;rects&quot;[i].show this function </span></span><br><span class="line">   rects[i].<span class="title function_">display</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// The if statement checks whether the frame count is divisible by 180. If so, it randomly selects some circles and sets their isChoose property to true</span></span><br><span class="line">   <span class="keyword">if</span> (frameCount % <span class="number">180</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// Loop according to the length of the Array</span></span><br><span class="line"><span class="comment">// set up a variable &quot;i&quot;</span></span><br><span class="line"><span class="comment">// let &quot;i&quot; equal to 0</span></span><br><span class="line"><span class="comment">// &quot;i&quot; less than &quot; Circle&quot; length,loop through the entire array</span></span><br><span class="line"><span class="comment">// &quot;i&quot; =&quot;1&quot;+ 1</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; circles.<span class="property">length</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">// For each circle, a random integer between 0 and 2 (inclusive) is generated using the random() function and then rounded down to the nearest integer using the int() function. If the resulting integer is 0, then the isChoose property of the circle is set to true.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">int</span>(<span class="title function_">random</span>(<span class="number">3</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">  circles[i].<span class="property">isChoose</span> = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// text align in the center of canvas</span></span><br><span class="line">   <span class="title function_">textAlign</span>(<span class="variable constant_">CENTER</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// fill color(r,g,b,alpha)</span></span><br><span class="line"><span class="comment">// alpha for fadeing the color</span></span><br><span class="line">   <span class="title function_">fill</span>(<span class="number">255</span>,<span class="number">2</span>,<span class="number">0</span>, <span class="number">200</span>);</span><br><span class="line">  </span><br><span class="line"><span class="comment">// set font size in 27</span></span><br><span class="line">   <span class="title function_">textSize</span>(<span class="number">50</span>);</span><br><span class="line">  </span><br><span class="line"><span class="comment">// set font  </span></span><br><span class="line">   <span class="title function_">textFont</span>(<span class="title class_">DeliciousHandrawn</span>)</span><br><span class="line"><span class="comment">// display text </span></span><br><span class="line">   <span class="title function_">text</span>(<span class="string">&quot;RMIT&quot;</span>, width / <span class="number">2</span>, height / <span class="number">2.5</span>);</span><br><span class="line">   <span class="title function_">text</span>(<span class="string">&quot;Creative Coding Specialisation&quot;</span>, width / <span class="number">2</span>, height / <span class="number">1.8</span>);</span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// create a class name &quot;Circle&quot;</span></span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line"><span class="comment">// create a function in the class name &quot;constructor&quot;</span></span><br><span class="line"><span class="comment">// (parameter x,y,tepe)</span></span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params">x, y, type</span>) &#123;</span><br><span class="line"><span class="comment">// sets the x-position of the circle to the value of the x parameter passed into the constructor.</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sets the y-position of the circle to the value of the y parameter passed into the constructor.</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">     </span><br><span class="line"><span class="comment">// sets the type of the circle to the value of the type parameter passed into the constructor.</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">type</span> = type;</span><br><span class="line">     </span><br><span class="line"><span class="comment">// sets the isChoose property of the circle to false, indicating that the circle is not currently selected.</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">isChoose</span> = <span class="literal">false</span>;</span><br><span class="line">     </span><br><span class="line"><span class="comment">// sets the starting transparency of the circle to 180 (out of 255)</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">_alpha</span> = <span class="number">180</span>;</span><br><span class="line">     </span><br><span class="line"><span class="comment">// sets the rate at which the circle&#x27;s size changes over time.</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">rC</span> = <span class="number">0.08</span>;</span><br><span class="line">     </span><br><span class="line"><span class="comment">// sets the initial size of the circle to 10 pixels.</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">r</span> = <span class="number">10</span>;</span><br><span class="line">   &#125; </span><br><span class="line"></span><br><span class="line">  <span class="title function_">display</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// no outline</span></span><br><span class="line">   <span class="title function_">noStroke</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// call function ellipse(x cordinate increace 5, y cordinate increase 5, this r is this radius)</span></span><br><span class="line">  <span class="title function_">ellipse</span>(<span class="variable language_">this</span>.<span class="property">x</span> + <span class="number">5</span>, <span class="variable language_">this</span>.<span class="property">y</span> + <span class="number">5</span>, <span class="variable language_">this</span>.<span class="property">r</span>, <span class="variable language_">this</span>.<span class="property">r</span>);</span><br><span class="line">  &#125;</span><br><span class="line">     </span><br><span class="line"><span class="comment">// update function</span></span><br><span class="line">   <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// if statement checks the type variable and sets the color fill accordingly</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">type</span> == <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="title function_">fill</span>(<span class="number">252</span>, <span class="number">226</span>, <span class="number">61</span>, <span class="variable language_">this</span>.<span class="property">_alpha</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">type</span> == <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="title function_">fill</span>(<span class="number">240</span>, <span class="number">230</span>, <span class="number">167</span>, <span class="variable language_">this</span>.<span class="property">_alpha</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">type</span> == <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="title function_">fill</span>(<span class="number">167</span>, <span class="number">200</span>, <span class="number">196</span>, <span class="variable language_">this</span>.<span class="property">_alpha</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line"><span class="comment">// If the isChoose variable is true, it increases the r variable by rC which is initially set to 0.08. If r exceeds 15, rC is multiplied by -1 which means the radius starts decreasing. If r becomes less than or equal to 10, r is set back to 10, rC is set back to 0.08, and isChoose is set back to false.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isChoose</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">r</span> += <span class="variable language_">this</span>.<span class="property">rC</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">r</span> &gt; <span class="number">15</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">rC</span> *= -<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">r</span> &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">r</span> = <span class="number">10</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">rC</span> = <span class="number">0.08</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">isChoose</span> = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The _alpha variable is set to a value mapped from the r value, between 10 and 15, to the range of 0 and 255. The value is constrained to a minimum of 180 and a maximum of 255.</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">_alpha</span> = <span class="title function_">constrain</span>(<span class="title function_">map</span>(<span class="variable language_">this</span>.<span class="property">r</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">180</span>, <span class="number">255</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// create a class name &quot;Rect&quot;</span></span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">Rect</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The constructor() method initializes the x, y, and _alpha variables.</span></span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">_alpha</span> = <span class="number">255</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The display() method draws a rectangle using the rect() function, with a width of 40 and the height of the canvas.</span></span><br><span class="line">  <span class="title function_">display</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">noStroke</span>();</span><br><span class="line">  <span class="title function_">rect</span>(<span class="variable language_">this</span>.<span class="property">x</span>, <span class="variable language_">this</span>.<span class="property">y</span>, <span class="number">40</span>, height);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The update() method sets the fill color using fill(), with an initial value of  r,g,b and an alpha value of _alpha.</span></span><br><span class="line">  <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">fill</span>(<span class="number">236</span>, <span class="number">246</span>, <span class="number">231</span>, <span class="variable language_">this</span>.<span class="property">_alpha</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// Checks if the difference between pmouseX and mouseX is greater than 20, and if the absolute difference between mouseX and this.x+20 is less than or equal to 20. If so, it sets the _alpha variable to 255. Otherwise, it decreases the _alpha variable by 10.Finally, it checks if _alpha is less than 0 and sets it back to 0 if so.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">abs</span>(pmouseX - mouseX) &gt; <span class="number">20</span> &amp;&amp; <span class="title function_">abs</span>(mouseX - (<span class="variable language_">this</span>.<span class="property">x</span> + <span class="number">20</span>)) &lt;= <span class="number">20</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_alpha</span> = <span class="number">255</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_alpha</span> -= <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_alpha</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_alpha</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Reference-Links"><a href="#Reference-Links" class="headerlink" title="Reference Links"></a>Reference Links</h2><p><a href="http://thomas.capogre.co/rmit/ccs/2022/08/16/code_comments.html">Thomas Capogreco Blog</a></p>
<p><a href="https://thecodingtrain.com/tracks/code-programming-with-p5-js">The Coding Train - CODE! PROGRAMMING WITH P5.JS</a></p>
]]></content>
      <tags>
        <tag>Assignments 1 p5 Sketch - Banner Design</tag>
      </tags>
  </entry>
  <entry>
    <title>Creative Coding - Practice 4</title>
    <url>/15.html</url>
    <content><![CDATA[<h2 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h2><p> This exercise is for learning and conceptual understanding of Perlin Noise Flow Field. I feel that Flow Field has a futuristic sci-fi vibe and it can be seen in many digital artworks where artists employ Perlin Noise and Flow Field. Therefore, I hope to be able to incorporate it into my future works through this exercise. </p>
<iframe width="800" height = "800" src="https://editor.p5js.org/ariaranya/full/V-isI7D5R"></iframe>




<h2 id="Code-and-Comments"><a href="#Code-and-Comments" class="headerlink" title="Code and Comments"></a>Code and Comments</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Variable Declarations</span></span><br><span class="line"><span class="keyword">var</span> points = [];  <span class="comment">// an array that will store the positions of the particles.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mult;  <span class="comment">// mult is used to control the movement of the particles based on noise.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r1, r2, g1, g2, b1, b2;  <span class="comment">// define the color range for the particles.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// loops, after setup has run</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">createCanvas</span>(<span class="number">600</span>, <span class="number">600</span>); <span class="comment">// create a canvas with 600px wide and 600px tall</span></span><br><span class="line">  </span><br><span class="line">  <span class="title function_">background</span>(<span class="number">255</span>); <span class="comment">// fill background color in white</span></span><br><span class="line">  </span><br><span class="line">  <span class="title function_">angleMode</span>(<span class="variable constant_">DEGREES</span>);  <span class="comment">//  sets the angle mode to degrees</span></span><br><span class="line">  </span><br><span class="line">  <span class="title function_">noiseDetail</span>(<span class="number">1</span>);  <span class="comment">// sets the level of detail for the Perlin noise function</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> density = <span class="number">20</span>;  <span class="comment">// set density equal 20</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> space = width / density;  <span class="comment">//  space will be 600 / 20 = 30</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// For loops generate the initial positions of the particles based on a grid </span></span><br><span class="line">  <span class="comment">// Each particle is slightly offset</span></span><br><span class="line">  <span class="comment">//The outer for loop iterates over the x-coordinates in the grid.</span></span><br><span class="line">  <span class="comment">//The inner for loop iterates over the y-coordinates in the grid.</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; width; x += space) &#123;  <span class="comment">// variable x equal to 0</span></span><br><span class="line">                                            <span class="comment">// as x less than the width of canvas</span></span><br><span class="line">                                            <span class="comment">// x equal to x plus space</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> y = <span class="number">0</span>; y &lt; height; y += space) &#123;  <span class="comment">// variable y equal to 0</span></span><br><span class="line">                                                 <span class="comment">// as y less than the height of   canvas</span></span><br><span class="line">                                                 <span class="comment">// y equal to y plus space</span></span><br><span class="line">         </span><br><span class="line">      <span class="comment">// create a new particle position vector  </span></span><br><span class="line">      <span class="comment">//The x-coordinate of the particle is  x + random(-10, 10).</span></span><br><span class="line">      <span class="comment">//The y-coordinate of the particle is  y + random(-10, 10)  </span></span><br><span class="line">      <span class="keyword">var</span> p = <span class="title function_">createVector</span>(x + <span class="title function_">random</span>(-<span class="number">10</span>, <span class="number">10</span>), y + <span class="title function_">random</span>(-<span class="number">10</span>, <span class="number">10</span>));</span><br><span class="line">      </span><br><span class="line">        </span><br><span class="line">      points.<span class="title function_">push</span>(p);  <span class="comment">//  &quot;p&quot; is added to the points array    </span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// assigned random values to define the color ranges for the particles</span></span><br><span class="line">  r1 = <span class="title function_">random</span>(<span class="number">255</span>);</span><br><span class="line">  r2 = <span class="title function_">random</span>(<span class="number">255</span>);</span><br><span class="line">  g1 = <span class="title function_">random</span>(<span class="number">255</span>);</span><br><span class="line">  g2 = <span class="title function_">random</span>(<span class="number">255</span>);</span><br><span class="line">  b1 = <span class="title function_">random</span>(<span class="number">255</span>);</span><br><span class="line">  b2 = <span class="title function_">random</span>(<span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">  mult = <span class="title function_">random</span>(<span class="number">0.002</span>, <span class="number">0.01</span>); <span class="comment">// assigned a random value between 0.002 and 0.01</span></span><br><span class="line"></span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// loops, after setup has run</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">noStroke</span>();  <span class="comment">// no stroke, only have fill colors</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// The for loop iterates over each particle in the points array</span></span><br><span class="line">  <span class="comment">// function is used to map the values of points[i].x and points[i].y</span></span><br><span class="line">  <span class="comment">// to the color ranges defined by r1, r2, g1, g2, b1, and b2</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; points.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> r = <span class="title function_">map</span>(points[i].<span class="property">x</span>, <span class="number">0</span>, width, r1, r2);</span><br><span class="line">    <span class="keyword">var</span> g = <span class="title function_">map</span>(points[i].<span class="property">y</span>, <span class="number">0</span>, height, g1, g2);</span><br><span class="line">    <span class="keyword">var</span> b = <span class="title function_">map</span>(points[i].<span class="property">x</span>, <span class="number">0</span>, width, b1, b2);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// variavle alpha to create a fade effect</span></span><br><span class="line">    <span class="comment">// The dist() function calculates the distance between the center of the canvas  and each point.</span></span><br><span class="line">    <span class="comment">//The map() function is used to convert this distance to a new range of values.</span></span><br><span class="line">    <span class="comment">// The original range is from 0 to 350</span></span><br><span class="line">    <span class="comment">// The new range is from 400 to 0</span></span><br><span class="line">    <span class="keyword">var</span> alpha = <span class="title function_">map</span>(<span class="title function_">dist</span>(width / <span class="number">2</span>, height / <span class="number">2</span>, points[i].<span class="property">x</span>, points[i].<span class="property">y</span>), <span class="number">0</span>, <span class="number">350</span>, <span class="number">400</span>, <span class="number">0</span>);  </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//  fill colors based on the caculated value of r, g, b, alpha</span></span><br><span class="line">    <span class="title function_">fill</span>(r, g, b, alpha);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// function converts this noise value from the range 0 to 1 </span></span><br><span class="line">    <span class="comment">// to an angle in degrees, ranging from 0 to 720.</span></span><br><span class="line">    <span class="keyword">var</span> angle = <span class="title function_">map</span>(<span class="title function_">noise</span>(points[i].<span class="property">x</span> * mult, points[i].<span class="property">y</span> * mult), <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">720</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Updates the position of the current point </span></span><br><span class="line">    points[i].<span class="title function_">add</span>(<span class="title function_">createVector</span>(<span class="title function_">cos</span>(angle), <span class="title function_">sin</span>(angle)));</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// if distance less than 350 draw a small ellipse</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">dist</span>(width / <span class="number">2</span>, height / <span class="number">2</span>, points[i].<span class="property">x</span>, points[i].<span class="property">y</span>) &lt; <span class="number">350</span>) &#123;</span><br><span class="line">      <span class="title function_">ellipse</span>(points[i].<span class="property">x</span>, points[i].<span class="property">y</span>, <span class="number">1</span>);  <span class="comment">// x coordinate = point[i].x</span></span><br><span class="line">                                             <span class="comment">// y coordinate = point[i].y</span></span><br><span class="line">                                             <span class="comment">// the width &amp; height of ellipse = 1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Reference-Links"><a href="#Reference-Links" class="headerlink" title="Reference Links"></a>Reference Links</h2><p><a href="https://www.youtube.com/watch?v=1-QXuR-XX_s">Colorful Coding</a><br><a href="https://www.youtube.com/watch?v=BjoM9oKOAKY">The Coding Train</a></p>
]]></content>
      <tags>
        <tag>Practice - flow filed</tag>
      </tags>
  </entry>
  <entry>
    <title>Creative Coding - Practice 5</title>
    <url>/16.html</url>
    <content><![CDATA[<h2 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h2><p>This exercise is based on the tutorial by “The Coding Train” on star field and explores the implementation of the concept called “wrape speed.” When I saw the artist’s work, I thought it would be interesting to create a rainy day background using a similar effect. I believe it would be an intriguing experiment to use creative coding to achieve a specific visual presentation. If I were to add rain sound effects in the future, I believe it would enhance the emotional immersion of this exercise.</p>
<iframe width="600" height="542" src="https://editor.p5js.org/ariaranya/full/jbKtAu_vG"></iframe>



<h2 id="Code-and-Comments"><a href="#Code-and-Comments" class="headerlink" title="Code and Comments"></a>Code and Comments</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// defines a class named &quot;Rain&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rain</span>&#123;</span><br><span class="line">  <span class="comment">// constructor function initializes the properties of the raindrop object  </span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>)&#123;  </span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">x</span> = <span class="title function_">random</span>(<span class="number">0</span>, width);  <span class="comment">// x-coordinate of the raindrop&#x27;s position </span></span><br><span class="line">                                 <span class="comment">//random value between 0 and width of the canvas</span></span><br><span class="line">     </span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">y</span> = <span class="title function_">random</span>(<span class="number">0</span>,height);  <span class="comment">// y-coordinate of the raindrop&#x27;s position</span></span><br><span class="line">                                <span class="comment">// random value between 0 and height of the canvas</span></span><br><span class="line">    </span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">r</span> = <span class="title function_">random</span>(<span class="number">0</span>,<span class="number">350</span>) / <span class="number">100</span>; <span class="comment">// radius = divides random value from 0-350 by 100</span></span><br><span class="line">    </span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">z</span> = <span class="title function_">random</span>(<span class="number">0</span>, width);  <span class="comment">// the distance of the raindrop from the viewer (z) </span></span><br><span class="line">                                 <span class="comment">// random value between 0 and width of the canvas. </span></span><br><span class="line">    </span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">pz</span> = <span class="variable language_">this</span>.<span class="property">z</span>;  <span class="comment">// sets the previous value of &quot;z&quot; to the current value of &quot;z&quot;</span></span><br><span class="line">     </span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">t</span> = <span class="title function_">random</span>(<span class="number">45</span>, <span class="number">100</span>);  <span class="comment">//transparency(t) of the raindrop </span></span><br><span class="line">                                <span class="comment">//random value between 45 and 100</span></span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// updating the raindrop&#x27;s position based on the speed variable</span></span><br><span class="line">  <span class="title function_">update</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">z</span> -= speed;  <span class="comment">// z = z-speed</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">z</span> &lt; <span class="number">1</span>)&#123;  <span class="comment">// if this.z less than 1, the following actions are performed</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// this.x = random value within the range of:</span></span><br><span class="line">        <span class="comment">// negative width to positive width</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = <span class="title function_">random</span>(-width, width); </span><br><span class="line">      </span><br><span class="line">        <span class="comment">// this.y = random value within the range of:</span></span><br><span class="line">        <span class="comment">// negative height to positive height</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = <span class="title function_">random</span>(-height,height);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// this.r = random value between 0 and 250, divided by 100 </span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">r</span> = <span class="title function_">random</span>(<span class="number">0</span>,<span class="number">250</span>) / <span class="number">100</span>;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// this.z = random value within the range of 0 to the width of the canvas</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">z</span> = <span class="title function_">random</span>(<span class="number">0</span>, width);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//updates the previous z value (pz) to the current z value</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pz</span> = <span class="variable language_">this</span>.<span class="property">z</span>;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//  displaying the raindrop on the canvas</span></span><br><span class="line">  <span class="title function_">show</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="title function_">fill</span>(<span class="number">255</span>, <span class="variable language_">this</span>.<span class="property">t</span>);  <span class="comment">// fill colors for raindrop in white </span></span><br><span class="line">                         <span class="comment">//with this.transparency</span></span><br><span class="line">    </span><br><span class="line">     <span class="title function_">noStroke</span>();  <span class="comment">// no stroke, only have fill colors</span></span><br><span class="line">    </span><br><span class="line">     <span class="comment">// sx - scaled x-coordinate</span></span><br><span class="line">     <span class="comment">// maps this.x position divided by this.z value</span></span><br><span class="line">     <span class="comment">// from 0-1 and 0 to the width of the canvas</span></span><br><span class="line">     <span class="keyword">let</span> sx = <span class="title function_">map</span>(<span class="variable language_">this</span>.<span class="property">x</span> / <span class="variable language_">this</span>. z, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, width)</span><br><span class="line">     </span><br><span class="line">     <span class="comment">// sy - scaled y-coordinate</span></span><br><span class="line">     <span class="comment">// maps this.y position divided by this.z value</span></span><br><span class="line">     <span class="comment">// from 0-1 and 0 to the height of the canvas</span></span><br><span class="line">     <span class="keyword">let</span> sy = <span class="title function_">map</span>(<span class="variable language_">this</span>.<span class="property">y</span> / <span class="variable language_">this</span>. z, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, height)</span><br><span class="line">     </span><br><span class="line">     <span class="comment">// draws an ellipse on the canvas at the position</span></span><br><span class="line">     <span class="comment">// specified by sx and sy with this. r(radius) of the raindrop</span></span><br><span class="line">     <span class="title function_">ellipse</span>(sx, sy, <span class="variable language_">this</span>.<span class="property">r</span>, <span class="variable language_">this</span>.<span class="property">r</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// maps this.x position divided by its previous z value (pz)</span></span><br><span class="line">    <span class="comment">// from 0-1 and the range of 0 to the width of the canvas</span></span><br><span class="line">    <span class="keyword">let</span> px = <span class="title function_">map</span>(<span class="variable language_">this</span>. x / <span class="variable language_">this</span>.<span class="property">pz</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, width)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// maps this.y position divided by its previous z value (pz) </span></span><br><span class="line">    <span class="comment">// from 0-1 and the range of 0 to the height of the canvas</span></span><br><span class="line">    <span class="keyword">let</span> py = <span class="title function_">map</span>(<span class="variable language_">this</span>. y / <span class="variable language_">this</span>.<span class="property">pz</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, height)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// updates the previous z value (pz) to the current z value</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pz</span> = <span class="variable language_">this</span>.<span class="property">z</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// sets the stroke in white and with this.transparency</span></span><br><span class="line">    <span class="title function_">stroke</span>(<span class="number">255</span>, <span class="variable language_">this</span>.<span class="property">t</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// draws a line segment between the current position (sx, sy) and </span></span><br><span class="line">    <span class="comment">// the previous position (px, py)</span></span><br><span class="line">    <span class="title function_">line</span>(sx, sy, px, py);</span><br><span class="line">      </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> raindrop = []  <span class="comment">// declares an empty array called&quot; raindrop&quot;                     </span></span><br><span class="line"><span class="keyword">let</span> speed;  <span class="comment">//  declares a variable &quot;speed&quot; </span></span><br><span class="line"><span class="keyword">let</span> bg;     <span class="comment">// eclares a variable &quot;bg&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setup</span>(<span class="params"></span>) &#123;  <span class="comment">// runs once, at the start</span></span><br><span class="line">    <span class="title function_">createCanvas</span>(<span class="number">600</span>, <span class="number">500</span>);  <span class="comment">// create a canvas in 600px wide and 500px tall</span></span><br><span class="line">    bg = <span class="title function_">loadImage</span>(<span class="string">&#x27;1.jpg&#x27;</span>); <span class="comment">// loads an image file named &quot;1.jpg&quot;</span></span><br><span class="line">    <span class="title function_">background</span>(bg);  <span class="comment">//sets loaded image as background</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">// for loop</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">800</span>; i++)&#123;<span class="comment">// let i = 0; i less than 800; i = i+1</span></span><br><span class="line">      </span><br><span class="line">        raindrop[i] = <span class="keyword">new</span> <span class="title class_">Rain</span>();<span class="comment">//creates a new instance of the Rain class </span></span><br><span class="line">                                 <span class="comment">//assigns it to the i-th index of the raindrop array</span></span><br><span class="line">      &#125; </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;   <span class="comment">// loops, after setup has run</span></span><br><span class="line">   <span class="title function_">background</span>(bg);  <span class="comment">// set background by using &quot;bg&quot;- loaded image</span></span><br><span class="line">  </span><br><span class="line">   <span class="title function_">translate</span>(width / <span class="number">2</span>, height / <span class="number">2</span>); <span class="comment">//  translates to the（center of the canvas）</span></span><br><span class="line">  </span><br><span class="line">   <span class="comment">//  maps the current mouseX position to a value between 0 and 50</span></span><br><span class="line">   speed = <span class="title function_">map</span>(mouseX, <span class="number">0</span>, width, <span class="number">0</span>, <span class="number">50</span>); </span><br><span class="line">  </span><br><span class="line">   <span class="comment">// this loop iterates over each raindrop in the raindrop array</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; raindrop. length; i++)&#123; <span class="comment">// i = 0, i less than raindrop. length</span></span><br><span class="line">                                               <span class="comment">// i = i+1</span></span><br><span class="line">       <span class="comment">// calls the update() method of the Rain instance at index &quot;i&quot;</span></span><br><span class="line">       raindrop[i].<span class="title function_">update</span>(); </span><br><span class="line">     </span><br><span class="line">       <span class="comment">//  calls the show() method of the Rain instance at index &quot;i&quot;</span></span><br><span class="line">       raindrop[i].<span class="title function_">show</span>();</span><br><span class="line">     </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Reference-Links"><a href="#Reference-Links" class="headerlink" title="Reference Links"></a>Reference Links</h2><p><a href="https://www.youtube.com/watch?v=17WoOqgXsRM">The Coding Train</a></p>
]]></content>
      <tags>
        <tag>Practice - rainning day</tag>
      </tags>
  </entry>
  <entry>
    <title>Creative Coding - Practice 6</title>
    <url>/17.html</url>
    <content><![CDATA[<h2 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h2><p>This is an exercise in mouse and keyboard interaction. Circles are generated around the mouse position, and their position, size, and color are randomized. Each time the mouse is pressed, a random number of circles is created, resulting in a dynamic and unpredictable arrangement. The circles are displayed with varying stroke weights and vibrant colors, adding energy and liveliness to the composition. Pressing the spacebar clears the canvas and starts over. I believe this kind of interaction may appear in future artworks, so I have been practicing it.</p>
<iframe width="600" height="642" src="https://editor.p5js.org/ariaranya/full/rbIGAc4xE"></iframe>




<h2 id="Code-and-Comments"><a href="#Code-and-Comments" class="headerlink" title="Code and Comments"></a>Code and Comments</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> cirs = []; <span class="comment">// An array to store circle objects</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">createCanvas</span>(<span class="number">600</span>, <span class="number">600</span>); <span class="comment">// Creates a canvas with a size of 600x600 pixels</span></span><br><span class="line">  <span class="title function_">colorMode</span>(<span class="variable constant_">HSB</span>, <span class="number">360</span>, <span class="number">100</span>, <span class="number">100</span>); <span class="comment">// Sets the color mode to HSB</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">background</span>(<span class="number">220</span>); <span class="comment">// Clears the background to light gray (220)</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cirs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    cirs[i].<span class="title function_">display</span>(); <span class="comment">// Displays each circle in the cirs array by calling their display() method</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">keyPressed</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (key == <span class="string">&quot; &quot;</span>) &#123;</span><br><span class="line">    cirs = []; <span class="comment">// If the spacebar is pressed, the cirs array is emptied (all circles are removed)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mousePressed</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> createNum = <span class="title function_">int</span>(<span class="title function_">random</span>(<span class="number">5</span>, <span class="number">10</span>)); <span class="comment">// Generates a random number between 5 and 10</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; createNum; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> cx, cy, cs; <span class="comment">// Variables for circle position and size</span></span><br><span class="line">    cx = mouseX + <span class="title function_">random</span>(-<span class="number">50</span>, <span class="number">50</span>); <span class="comment">// Randomizes the x position of the circle around the mouse position</span></span><br><span class="line">    cy = mouseY + <span class="title function_">random</span>(-<span class="number">50</span>, <span class="number">50</span>); <span class="comment">// Randomizes the y position of the circle around the mouse position</span></span><br><span class="line">    cs = <span class="title function_">random</span>(<span class="number">1</span>, <span class="number">20</span>); <span class="comment">// Randomizes the size of the circle between 1 and 20</span></span><br><span class="line">    cirs.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="title class_">Circle</span>(cx, cy, cs)); <span class="comment">// Creates a new Circle object with the randomized values and adds it to the cirs array</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x, y, s</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = x; <span class="comment">// Stores the x position of the circle</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> = y; <span class="comment">// Stores the y position of the circle</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = s; <span class="comment">// Stores the size of the circle</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">col</span> = <span class="title function_">color</span>(<span class="title function_">random</span>(<span class="number">200</span>, <span class="number">230</span>), <span class="title function_">random</span>(<span class="number">20</span>, <span class="number">100</span>), <span class="number">100</span>); <span class="comment">// Generates a random color for the circle using the HSB color mode</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">wei</span> = <span class="number">2</span>; <span class="comment">// Sets the stroke weight of the circle to 2</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">display</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">noFill</span>(); <span class="comment">// Sets the fill of the circle to none</span></span><br><span class="line">    <span class="title function_">stroke</span>(<span class="variable language_">this</span>.<span class="property">col</span>); <span class="comment">// Sets the stroke color of the circle using the generated color</span></span><br><span class="line">    <span class="title function_">strokeWeight</span>(<span class="variable language_">this</span>.<span class="property">wei</span>); <span class="comment">// Sets the stroke weight of the circle</span></span><br><span class="line">    <span class="title function_">ellipse</span>(<span class="variable language_">this</span>.<span class="property">x</span>, <span class="variable language_">this</span>.<span class="property">y</span>, <span class="variable language_">this</span>.<span class="property">size</span>, <span class="variable language_">this</span>.<span class="property">size</span>); <span class="comment">// Draws the circle on the canvas using the ellipse() function</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="Reference-Links"><a href="#Reference-Links" class="headerlink" title="Reference Links"></a>Reference Links</h2><p><a href="https://www.youtube.com/watch?v=TaN5At5RWH8">The Coding Train</a></p>
]]></content>
      <tags>
        <tag>Practice - bubbles</tag>
      </tags>
  </entry>
  <entry>
    <title>Creative Coding - Practice 7</title>
    <url>/18%20copy.html</url>
    <content><![CDATA[<h2 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h2><p>This exercise is a derivative of the previous bubble exercise. Building upon its existing functionality, I added sliders that allow adjusting the size of the circles and the stroke weight. Additionally, I introduced a delay in the bubble generation, making the process appear more natural and dynamic. This enhancement adds more interactivity compared to before, making it more engaging and enjoyable.</p>
<p>By refining and modifying previous exercises, my aim is to gain a better understanding of coding logic and enhance my ability to independently program. It serves as a means to further explore the intricacies of coding while simultaneously honing my programming skills.</p>
<iframe width="600" height="642" src="https://editor.p5js.org/ariaranya/full/HneSlzvYZ"></iframe>




<h2 id="Code-and-Comments"><a href="#Code-and-Comments" class="headerlink" title="Code and Comments"></a>Code and Comments</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> slider1, slider2;</span><br><span class="line"><span class="keyword">let</span> cirs = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// loops, after setup has run</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">createCanvas</span>(<span class="number">600</span>, <span class="number">600</span>); <span class="comment">// Creates a canvas with a size of 600x600 pixels</span></span><br><span class="line">  <span class="title function_">colorMode</span>(<span class="variable constant_">HSB</span>, <span class="number">360</span>, <span class="number">100</span>, <span class="number">100</span>); <span class="comment">// Sets the color mode to HSB</span></span><br><span class="line"></span><br><span class="line">  slider1 = <span class="title function_">createSlider</span>(<span class="number">1</span>, <span class="number">100</span>, <span class="number">10</span>); <span class="comment">// Creates a slider for circle size, range: 1 to 100, initial value: 10</span></span><br><span class="line">  slider1.<span class="title function_">position</span>(<span class="number">10</span>, height - <span class="number">60</span>); <span class="comment">// Positions the slider on the canvas</span></span><br><span class="line">  slider1.<span class="title function_">style</span>(<span class="string">&quot;width&quot;</span>, <span class="string">&quot;120px&quot;</span>); <span class="comment">// Sets the width of the slider</span></span><br><span class="line"></span><br><span class="line">  slider2 = <span class="title function_">createSlider</span>(<span class="number">1</span>, <span class="number">20</span>, <span class="number">1</span>); <span class="comment">// Creates a slider for stroke weight, range: 1 to 20, initial value: 1</span></span><br><span class="line">  slider2.<span class="title function_">position</span>(<span class="number">10</span>, height - <span class="number">40</span>); <span class="comment">// Positions the slider on the canvas</span></span><br><span class="line">  slider2.<span class="title function_">style</span>(<span class="string">&quot;width&quot;</span>, <span class="string">&quot;120px&quot;</span>); <span class="comment">// Sets the width of the slider</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// loops, after setup has run</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">background</span>(<span class="number">220</span>); <span class="comment">// Clears the background to light gray (220)</span></span><br><span class="line">  <span class="title function_">textSize</span>(<span class="number">15</span>);</span><br><span class="line">  <span class="title function_">textAlign</span>(<span class="variable constant_">LEFT</span>, <span class="variable constant_">CENTER</span>);</span><br><span class="line">  <span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="title function_">noStroke</span>();</span><br><span class="line">  <span class="title function_">text</span>(<span class="string">&quot;circle size&quot;</span>, <span class="number">140</span>, height - <span class="number">60</span> + <span class="number">10</span>); <span class="comment">// Displays label for circle size slider</span></span><br><span class="line">  <span class="title function_">text</span>(<span class="string">&quot;stroke weight&quot;</span>, <span class="number">140</span>, height - <span class="number">40</span> + <span class="number">10</span>); <span class="comment">// Displays label for stroke weight slider</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cirs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    cirs[i].<span class="title function_">display</span>(); <span class="comment">// Displays each circle in the cirs array by calling their display() method</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">keyPressed</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (key == <span class="string">&quot; &quot;</span>) &#123;</span><br><span class="line">    cirs = []; <span class="comment">// If the spacebar is pressed, the cirs array is emptied (all circles are removed)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mousePressed</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> createNum = <span class="title function_">int</span>(<span class="title function_">random</span>(<span class="number">5</span>, <span class="number">10</span>)); <span class="comment">// Generates a random number between 5 and 10</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; createNum; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> cx, cy, cs;</span><br><span class="line">    cx = mouseX + <span class="title function_">random</span>(-<span class="number">50</span>, <span class="number">50</span>); <span class="comment">// Randomizes the x position of the circle around the mouse position</span></span><br><span class="line">    cy = mouseY + <span class="title function_">random</span>(-<span class="number">50</span>, <span class="number">50</span>); <span class="comment">// Randomizes the y position of the circle around the mouse position</span></span><br><span class="line">    cs = <span class="title function_">random</span>(<span class="number">1</span>, slider1.<span class="title function_">value</span>()); <span class="comment">// Randomizes the size of the circle between 1 and the value of slider1</span></span><br><span class="line">    cirs.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="title class_">Circle</span>(cx, cy, cs)); <span class="comment">// Creates a new Circle object with the randomized values and adds it to the cirs array</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x, y, s</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = x; <span class="comment">// Stores the x position of the circle</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> = y; <span class="comment">// Stores the y position of the circle</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = s; <span class="comment">// Stores the size of the circle</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">col</span> = <span class="title function_">color</span>(<span class="title function_">random</span>(<span class="number">200</span>, <span class="number">230</span>), <span class="title function_">random</span>(<span class="number">20</span>, <span class="number">100</span>), <span class="number">100</span>); <span class="comment">// Generates a random color for the circle using the HSB color mode</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">wei</span> = slider2.<span class="title function_">value</span>(); <span class="comment">// Sets the stroke weight of the circle to the value of slider2</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">display</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">noFill</span>(); <span class="comment">// Sets the fill of the circle to none</span></span><br><span class="line">    <span class="title function_">stroke</span>(<span class="variable language_">this</span>.<span class="property">col</span>); <span class="comment">// Sets the stroke color of the circle using the generated color</span></span><br><span class="line">    <span class="title function_">strokeWeight</span>(<span class="variable language_">this</span>.<span class="property">wei</span>); <span class="comment">// Sets the stroke weight of the circle</span></span><br><span class="line">    <span class="title function_">ellipse</span>(<span class="variable language_">this</span>.<span class="property">x</span>, <span class="variable language_">this</span>.<span class="property">y</span>, <span class="variable language_">this</span>.<span class="property">size</span>, <span class="variable language_">this</span>.<span class="property">size</span>); <span class="comment">// Draws the circle on the canvas using the ellipse() function</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Reference-Links"><a href="#Reference-Links" class="headerlink" title="Reference Links"></a>Reference Links</h2><p><a href="https://www.youtube.com/watch?v=TaN5At5RWH8">The Coding Train</a></p>
]]></content>
      <tags>
        <tag>Practice - Bubble 2</tag>
      </tags>
  </entry>
  <entry>
    <title>Creative Coding - Practice 8</title>
    <url>/18.html</url>
    <content><![CDATA[<h2 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h2><p>This artwork is a visualization of an L-system, which is a mathematical system used to generate complex and self-similar patterns. The L-system in this code uses a set of rules to iteratively replace symbols in a string, resulting in a sequence of instructions for drawing.</p>
<p>I find it highly creative to simulate the growth of plants using an L-system. Implementing such a growth animation through code is particularly special and it’s something I aspire to master. The utilization of lerping, for example, demonstrates a unique approach.</p>
<iframe width="600" height="642" src="https://editor.p5js.org/ariaranya/full/4xMhPsMdG"></iframe>




<h2 id="Code-and-Comments"><a href="#Code-and-Comments" class="headerlink" title="Code and Comments"></a>Code and Comments</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Surrond items that we want to lerp with () in the rules</span></span><br><span class="line"><span class="comment">// () characters are then stripped from the next generation</span></span><br><span class="line"><span class="keyword">const</span> rules = &#123;</span><br><span class="line">  <span class="attr">X</span>: [</span><br><span class="line">    <span class="comment">// Original rule</span></span><br><span class="line">    &#123; <span class="attr">rule</span>: <span class="string">&quot;(F[+X][-X]FX)&quot;</span>,  <span class="attr">prob</span>: <span class="number">0.5</span>  &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Fewer limbs</span></span><br><span class="line">    &#123; <span class="attr">rule</span>: <span class="string">&quot;(F[-X]FX)&quot;</span>,      <span class="attr">prob</span>: <span class="number">0.05</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">rule</span>: <span class="string">&quot;(F[+X]FX)&quot;</span>,      <span class="attr">prob</span>: <span class="number">0.05</span> &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Extra rotation</span></span><br><span class="line">    &#123; <span class="attr">rule</span>: <span class="string">&quot;(F[++X][-X]FX)&quot;</span>, <span class="attr">prob</span>: <span class="number">0.1</span>  &#125;,</span><br><span class="line">    &#123; <span class="attr">rule</span>: <span class="string">&quot;(F[+X][--X]FX)&quot;</span>, <span class="attr">prob</span>: <span class="number">0.1</span>  &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Berries/fruits</span></span><br><span class="line">    &#123; <span class="attr">rule</span>: <span class="string">&quot;(F[+X][-X]FXA)&quot;</span>,  <span class="attr">prob</span>: <span class="number">0.1</span>  &#125;,</span><br><span class="line">    &#123; <span class="attr">rule</span>: <span class="string">&quot;(F[+X][-X]FXB)&quot;</span>,  <span class="attr">prob</span>: <span class="number">0.1</span>  &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">F</span>: [</span><br><span class="line">    <span class="comment">// Original rule</span></span><br><span class="line">    &#123; <span class="attr">rule</span>: <span class="string">&quot;F(F)&quot;</span>,  <span class="attr">prob</span>: <span class="number">0.85</span> &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Extra growth</span></span><br><span class="line">    &#123; <span class="attr">rule</span>: <span class="string">&quot;F(FF)&quot;</span>, <span class="attr">prob</span>: <span class="number">0.05</span> &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Stunted growth</span></span><br><span class="line">    &#123; <span class="attr">rule</span>: <span class="string">&quot;F&quot;</span>,   <span class="attr">prob</span>: <span class="number">0.1</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;(&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;)&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> len = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">const</span> ang = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> drawRules;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> word = <span class="string">&quot;X&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> maxGeneration = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> currGeneration = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> growthPercent = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> growthRate = <span class="number">0.04</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">createCanvas</span>(<span class="number">600</span>, <span class="number">600</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">strokeWeight</span>(<span class="number">2</span>);</span><br><span class="line">  </span><br><span class="line">  drawRules = &#123;</span><br><span class="line">    <span class="string">&quot;A&quot;</span>: <span class="function">(<span class="params">t</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// Draw circle at current location</span></span><br><span class="line">      <span class="title function_">noStroke</span>();</span><br><span class="line">      <span class="title function_">fill</span>(<span class="string">&quot;#E5CEDC&quot;</span>);</span><br><span class="line">      <span class="title function_">circle</span>(<span class="number">0</span>, <span class="number">0</span>, len*<span class="number">2</span> * t);</span><br><span class="line">    &#125;,  </span><br><span class="line">    <span class="string">&quot;B&quot;</span>: <span class="function">(<span class="params">t</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// Draw circle at current location</span></span><br><span class="line">      <span class="title function_">noStroke</span>();</span><br><span class="line">      <span class="title function_">fill</span>(<span class="string">&quot;#FCA17D&quot;</span>);</span><br><span class="line">      <span class="title function_">circle</span>(<span class="number">0</span>, <span class="number">0</span>, len*<span class="number">2</span> * t);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;F&quot;</span>: <span class="function">(<span class="params">t</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// Draw line forward, then move to end of line</span></span><br><span class="line">      <span class="title function_">stroke</span>(<span class="string">&quot;#9ea93f&quot;</span>);</span><br><span class="line">      <span class="title function_">line</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, -len * t);</span><br><span class="line">      <span class="title function_">translate</span>(<span class="number">0</span>, -len * t);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;+&quot;</span>: <span class="function">(<span class="params">t</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// Rotate right</span></span><br><span class="line">      <span class="title function_">rotate</span>(<span class="variable constant_">PI</span>/<span class="number">180</span> * -ang * t);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;-&quot;</span>: <span class="function">(<span class="params">t</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// Rotate right</span></span><br><span class="line">      <span class="title function_">rotate</span>(<span class="variable constant_">PI</span>/<span class="number">180</span> * ang * t);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// Save current location</span></span><br><span class="line">    <span class="string">&quot;[&quot;</span>: push,</span><br><span class="line">    <span class="comment">// Restore last location</span></span><br><span class="line">    <span class="string">&quot;]&quot;</span>: pop,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">background</span>(<span class="number">28</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(growthPercent &lt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> mod = (currGeneration + growthPercent);</span><br><span class="line">    growthPercent += growthRate/mod;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">nextGeneration</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">drawLsysLerp</span>(width/<span class="number">2</span>, height, word, growthPercent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mouseReleased</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">nextGeneration</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">nextGeneration</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(growthPercent &lt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(currGeneration === maxGeneration) &#123;</span><br><span class="line">    currGeneration = <span class="number">0</span>;</span><br><span class="line">    word = <span class="string">&quot;X&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  word = <span class="title function_">generate</span>(word);</span><br><span class="line">  </span><br><span class="line">  currGeneration ++;</span><br><span class="line">  growthPercent = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">generate</span>(<span class="params">word</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> next = <span class="string">&quot;&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; word.<span class="property">length</span>; i ++) &#123;</span><br><span class="line">    <span class="keyword">let</span> c = word[i];</span><br><span class="line">    <span class="keyword">if</span>(c <span class="keyword">in</span> rules) &#123;</span><br><span class="line">      <span class="keyword">let</span> rule = rules[c];</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// Check if we&#x27;re using an array or not</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(rule)) &#123;</span><br><span class="line">        next += <span class="title function_">chooseOne</span>(rule); <span class="comment">// If we are, choose one of the options</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next += rules[c]; <span class="comment">// Otherwise use the rule directly</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      next += c;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">chooseOne</span>(<span class="params">ruleSet</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> n = <span class="title function_">random</span>(); <span class="comment">// Random number between 0-1</span></span><br><span class="line">  <span class="keyword">let</span> t = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ruleSet.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    t += ruleSet[i].<span class="property">prob</span>; <span class="comment">// Keep adding the probability of the options to total</span></span><br><span class="line">    <span class="keyword">if</span>(t &gt; n) &#123; <span class="comment">// If the total is more than the random value</span></span><br><span class="line">      <span class="keyword">return</span> ruleSet[i].<span class="property">rule</span>; <span class="comment">// Choose that option</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">drawLsysLerp</span>(<span class="params">x, y, state, t</span>) &#123;</span><br><span class="line">  t = <span class="title function_">constrain</span>(t, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> lerpOn = <span class="literal">false</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">push</span>();</span><br><span class="line">  <span class="title function_">translate</span>(x, y);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; state.<span class="property">length</span>; i ++) &#123;</span><br><span class="line">    <span class="keyword">let</span> c = state[i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(c === <span class="string">&quot;(&quot;</span>) &#123;</span><br><span class="line">      lerpOn = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(c === <span class="string">&quot;)&quot;</span>) &#123;</span><br><span class="line">      lerpOn = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> lerpT = t;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!lerpOn) &#123;</span><br><span class="line">      lerpT = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(c <span class="keyword">in</span> drawRules) &#123;</span><br><span class="line">      drawRules[c](lerpT);</span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="Reference-Links"><a href="#Reference-Links" class="headerlink" title="Reference Links"></a>Reference Links</h2><p><a href="https://www.youtube.com/watch?v=TOPxa1xIG5Q">Growing Procedural Plants in P5js (L System Linear Interpolation) </a></p>
]]></content>
      <tags>
        <tag>Practice -</tag>
      </tags>
  </entry>
  <entry>
    <title>Creative Coding - AT2 April&#39;s loop</title>
    <url>/19.html</url>
    <content><![CDATA[<h2 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h2><p>net art webiste link: <a href="https://ariaranya-ariania-netart.deno.dev/">https://ariaranya-ariania-netart.deno.dev/</a></p>
<p>The inspiration for this net art work derives from a serendipitous encounter with a song titled “April’s Loop” by Numcha. The song’s ambiance resonated deeply with me, and its title evoked thoughts of everyday life in April. Despite the repetitive nature of daily routines, each day holds the potential for unique experiences, or the ability to break the monotony through mindful appreciation. Hence, I sought to convey my emotions and sensations through this piece.</p>
<p>In this artwork, you will find continuously rotating circles, akin to the flow of time. The colors and patterns employed represent the emotions stirred by the song and the subtle nuances of everyday life. By pressing the mouse button, you can rotate the circles counterclockwise, while moving the mouse away accelerates their rotation. This duality reflects our occasional desire for certain moments to repeat, while simultaneously longing for time to hasten its pace.</p>
<p>From a technical standpoint, I endeavored to realize abstract visual effects through creative programming. Additionally, I incorporated mouse interactions. When you press and rotate the mouse counterclockwise, the music ceases, resuming upon release.</p>
<p>While this artwork may possess technical imperfections, it served as an enjoyable exploration of creative possibilities.</p>
<iframe width="600" height="642"  src="https://editor.p5js.org/ariaranya/full/ydXqhTAz0"></iframe>







<h2 id="Code-and-Comments"><a href="#Code-and-Comments" class="headerlink" title="Code and Comments"></a>Code and Comments</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> img; <span class="comment">// Variable to store an image</span></span><br><span class="line"><span class="keyword">let</span> img2; <span class="comment">// Variable to store an image</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">0</span>; <span class="comment">// Angle variable</span></span><br><span class="line"><span class="keyword">let</span> radius; <span class="comment">// Variable to store the radius of the gradient</span></span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span>; <span class="comment">// Index variable</span></span><br><span class="line"><span class="keyword">let</span> a2 = <span class="number">30</span>; <span class="comment">// Angle variable</span></span><br><span class="line"><span class="keyword">let</span> col = []; <span class="comment">// Array to store colors</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isMousePressed = <span class="literal">false</span>; <span class="comment">// Boolean variable to track mouse press</span></span><br><span class="line"><span class="keyword">let</span> bgMusic; <span class="comment">// Variable to store background music</span></span><br><span class="line"><span class="keyword">let</span> isMusicPlaying = <span class="literal">false</span>; <span class="comment">// Boolean variable to track if music is playing</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">preload</span>(<span class="params"></span>) &#123;</span><br><span class="line">  bgMusic = <span class="title function_">loadSound</span>(<span class="string">&quot;bg_music.mp3&quot;</span>); <span class="comment">// Preload the background music</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// loops, after setup has run</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">createCanvas</span>(<span class="number">600</span>, <span class="number">600</span>); <span class="comment">// Creates a canvas with a size of 600x600 pixels</span></span><br><span class="line">  img = <span class="title function_">loadImage</span>(<span class="string">&quot;img.jpg&quot;</span>); <span class="comment">// Load an image</span></span><br><span class="line"></span><br><span class="line">  radius = width * <span class="number">0.35</span>; <span class="comment">// Set the radius based on canvas width</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Define colors</span></span><br><span class="line">  <span class="keyword">let</span> col1 = <span class="title function_">color</span>(<span class="number">255</span>, <span class="number">242</span>, <span class="number">197</span>);</span><br><span class="line">  <span class="keyword">let</span> col2 = <span class="title function_">color</span>(<span class="number">252</span>, <span class="number">232</span>, <span class="number">225</span>);</span><br><span class="line">  <span class="keyword">let</span> col3 = <span class="title function_">color</span>(<span class="number">197</span>, <span class="number">210</span>, <span class="number">23</span>, <span class="number">50</span>);</span><br><span class="line">  col = [col1, col2, col3]; <span class="comment">// Store colors in an array</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">angleMode</span>(<span class="variable constant_">DEGREES</span>); <span class="comment">// Set angle mode to degrees</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Play background music</span></span><br><span class="line">  bgMusic.<span class="title function_">loop</span>();</span><br><span class="line">  bgMusic.<span class="title function_">stop</span>(); <span class="comment">// Stop the music initially</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// loops, after setup has run</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (isMousePressed) &#123;</span><br><span class="line">    a -= <span class="number">0.4</span>; <span class="comment">// Decrease angle by 0.4 if mouse is pressed</span></span><br><span class="line">              <span class="comment">// a = a-0.4</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isMusicPlaying) &#123;</span><br><span class="line">      bgMusic.<span class="title function_">pause</span>(); <span class="comment">// Pause the music if mouse is pressed</span></span><br><span class="line">      isMusicPlaying = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    a += <span class="number">0.4</span>; <span class="comment">// Increase angle by 0.4 if mouse is not pressed</span></span><br><span class="line">              <span class="comment">// a = a+0.4</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isMusicPlaying) &#123;</span><br><span class="line">      bgMusic.<span class="title function_">loop</span>(); <span class="comment">// Continue playing the music if not already playing</span></span><br><span class="line">      isMusicPlaying = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  a2 += <span class="title function_">map</span>(mouseX, <span class="number">0</span>, width, <span class="number">0.2</span>, <span class="number">1</span>); <span class="comment">// Map mouse position to change a2 angle</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> centerX = width / <span class="number">2</span>; <span class="comment">// Calculate center X coordinate</span></span><br><span class="line">  <span class="keyword">let</span> centerY = height / <span class="number">2</span>; <span class="comment">// Calculate center Y coordinate</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">// The if statement checks if the value of a is divisible by 30 without a remainder (a % 30 === 0).</span></span><br><span class="line">  <span class="keyword">if</span> (a % <span class="number">30</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    index += <span class="number">1</span>; <span class="comment">// Increment index every 30 degrees</span></span><br><span class="line">                <span class="comment">// index = index + 1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> ctx = drawingContext; <span class="comment">// Get the drawing context of the canvas</span></span><br><span class="line">  <span class="keyword">const</span> gradient = ctx.<span class="title function_">createRadialGradient</span>(</span><br><span class="line">    width / <span class="number">2</span>,</span><br><span class="line">    height / <span class="number">2</span>,</span><br><span class="line">    <span class="number">20</span>,</span><br><span class="line">    width / <span class="number">2</span>,</span><br><span class="line">    height / <span class="number">2</span>,</span><br><span class="line">    radius</span><br><span class="line">  ); <span class="comment">// Create a radial gradient</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Define gradient colors using noise and mathematical expressions</span></span><br><span class="line">  gradient.<span class="title function_">addColorStop</span>(<span class="number">0</span>, <span class="string">&quot;#B9BEDE&quot;</span>);</span><br><span class="line">  gradient.<span class="title function_">addColorStop</span>(<span class="number">0.5</span> * <span class="title function_">noise</span>(frameCount * <span class="number">0.004</span>), <span class="string">&quot;white&quot;</span>);</span><br><span class="line">  gradient.<span class="title function_">addColorStop</span>(<span class="number">0.56</span> * <span class="title function_">noise</span>(frameCount * <span class="number">0.007</span>), <span class="string">&quot;#F2E3E4&quot;</span>);</span><br><span class="line">  gradient.<span class="title function_">addColorStop</span>(<span class="number">0.7</span> * <span class="title function_">noise</span>(frameCount * <span class="number">0.009</span>), <span class="string">&quot;#E3D2D4&quot;</span>);</span><br><span class="line">  gradient.<span class="title function_">addColorStop</span>(<span class="number">0.8</span>, <span class="string">&quot;#E0C3C3&quot;</span>);</span><br><span class="line">  gradient.<span class="title function_">addColorStop</span>(<span class="number">0.9</span> * <span class="title function_">noise</span>(frameCount * <span class="number">0.008</span>), <span class="string">&quot;#D8E2F1&quot;</span>);</span><br><span class="line">  gradient.<span class="title function_">addColorStop</span>(<span class="number">0.9</span> * <span class="title function_">noise</span>(frameCount * <span class="number">0.01</span>), <span class="string">&quot;#FFE364&quot;</span>);</span><br><span class="line">  gradient.<span class="title function_">addColorStop</span>(<span class="number">0.9</span>, <span class="string">&quot;#E2D1E2&quot;</span>);</span><br><span class="line">  gradient.<span class="title function_">addColorStop</span>(<span class="number">1</span>, <span class="string">&quot;#F8F6F4&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// The for loop </span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; radius * <span class="number">1</span>; i += <span class="number">0.1</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="title function_">int</span>(centerX + i * <span class="title function_">cos</span>(a2)); <span class="comment">// Calculate X coordinate based on angle and radius</span></span><br><span class="line">    <span class="keyword">let</span> y = <span class="title function_">int</span>(centerY + i * <span class="title function_">sin</span>(a2)); <span class="comment">// Calculate Y coordinate based on angle and radius</span></span><br><span class="line"></span><br><span class="line">    ctx.<span class="property">fillStyle</span> = gradient; <span class="comment">// Set fill style to the defined gradient</span></span><br><span class="line">    <span class="title function_">noStroke</span>(); <span class="comment">// Disable stroke</span></span><br><span class="line">    <span class="title function_">circle</span>(x, y, <span class="number">2</span>); <span class="comment">// Draw a small circle at (x, y) with a diameter of 2</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">random</span>() &lt; <span class="number">0.01</span>) &#123;</span><br><span class="line">    index += <span class="number">1</span>; <span class="comment">// Increment index randomly</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; radius * <span class="number">0.5</span>; i += <span class="number">0.01</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="title function_">int</span>(centerX + i * <span class="title function_">cos</span>(a)); <span class="comment">// Calculate X coordinate based on angle and radius</span></span><br><span class="line">    <span class="keyword">let</span> y = <span class="title function_">int</span>(centerY + i * <span class="title function_">sin</span>(a)); <span class="comment">// Calculate Y coordinate based on angle and radius</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">15</span>) &#123;</span><br><span class="line">      <span class="title function_">stroke</span>(col[index % <span class="number">3</span>]); <span class="comment">// Set stroke color based on index</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &lt; <span class="number">30</span>) &#123;</span><br><span class="line">      <span class="title function_">stroke</span>(col[(index + <span class="number">1</span>) % <span class="number">3</span>]); <span class="comment">// Set stroke color based on index</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &lt; <span class="number">45</span>) &#123;</span><br><span class="line">      <span class="title function_">stroke</span>(col[(index + <span class="number">2</span>) % <span class="number">3</span>]); <span class="comment">// Set stroke color based on index</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &lt; <span class="number">70</span>) &#123;</span><br><span class="line">      <span class="title function_">stroke</span>(col[(index + <span class="number">4</span>) % <span class="number">3</span>]); <span class="comment">// Set stroke color based on index</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">point</span>(x, y); <span class="comment">// Draw a point at (x, y)</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//The for loop </span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = radius * <span class="number">0.5</span>; i &lt; radius * <span class="number">0.8</span>; i += <span class="number">0.2</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="title function_">int</span>(centerX + i * <span class="title function_">cos</span>(a)); <span class="comment">// Calculate X coordinate based on angle and radius</span></span><br><span class="line">    <span class="keyword">let</span> y = <span class="title function_">int</span>(centerY + i * <span class="title function_">sin</span>(a)); <span class="comment">// Calculate Y coordinate based on angle and radius</span></span><br><span class="line">    <span class="keyword">let</span> colorStart = <span class="title function_">color</span>(<span class="number">224</span>, <span class="number">195</span>, <span class="number">195</span>, <span class="number">80</span>); <span class="comment">// Define start color</span></span><br><span class="line">    <span class="keyword">let</span> colorEnd = <span class="title function_">color</span>(<span class="number">247</span>, <span class="number">236</span>, <span class="number">240</span>); <span class="comment">// Define end color</span></span><br><span class="line">    <span class="keyword">let</span> t = <span class="title function_">map</span>(i, radius * <span class="number">0.7</span>, radius * <span class="number">0.3</span>, <span class="number">0</span>, <span class="number">1</span>); <span class="comment">// Map t value based on radius</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate a lerped color with noise and mathematical expressions</span></span><br><span class="line">    <span class="keyword">let</span> lerpedColor = <span class="title function_">lerpColor</span>(</span><br><span class="line">      colorStart,</span><br><span class="line">      colorEnd,</span><br><span class="line">      t + <span class="number">0.3</span> * <span class="title function_">noise</span>(frameCount * <span class="number">0.001</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="title function_">strokeWeight</span>(<span class="number">2</span>); <span class="comment">// Set stroke weight to 2 pixels</span></span><br><span class="line">    <span class="title function_">stroke</span>(lerpedColor); <span class="comment">// Set stroke color to the lerped color</span></span><br><span class="line">    <span class="title function_">point</span>(x, y); <span class="comment">// Draw a point at (x, y)</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// The for loop </span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = radius * <span class="number">0.8</span>; i &lt;= radius; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="title function_">int</span>(centerX + i * <span class="title function_">cos</span>(a)); <span class="comment">// Calculate X coordinate based on angle and radius</span></span><br><span class="line">    <span class="keyword">let</span> y = <span class="title function_">int</span>(centerY + i * <span class="title function_">sin</span>(a)); <span class="comment">// Calculate Y coordinate based on angle and radius</span></span><br><span class="line">    <span class="keyword">let</span> pixelColor = img.<span class="title function_">get</span>(x, y); <span class="comment">// Get the color of the pixel from the image</span></span><br><span class="line">    <span class="title function_">stroke</span>(pixelColor); <span class="comment">// Set stroke color to the pixel color</span></span><br><span class="line">    <span class="title function_">point</span>(x, y); <span class="comment">// Draw a point at (x, y)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mousePressed</span>(<span class="params"></span>) &#123;</span><br><span class="line">  isMousePressed = <span class="literal">true</span>; <span class="comment">// Set isMousePressed to true when the mouse is pressed</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mouseReleased</span>(<span class="params"></span>) &#123;</span><br><span class="line">  isMousePressed = <span class="literal">false</span>; <span class="comment">// Set isMousePressed to false when the mouse is released</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="Reference-Links"><a href="#Reference-Links" class="headerlink" title="Reference Links"></a>Reference Links</h2><p><a href="https://qianqian-ye.com/Everyday/Day27/">https://qianqian-ye.com/Everyday/Day27/</a></p>
]]></content>
      <tags>
        <tag>AT2</tag>
      </tags>
  </entry>
  <entry>
    <title>Creative Coding - AT3</title>
    <url>/05.html</url>
    <content><![CDATA[<h2 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h2><p>My inspration comes from Decidophobia, which is occasionally used to describe the situation when someone hesitates or struggles to make decisions. It’s not an officially recognized phobia in the Diagnostic manual. People sometimes use this term in a self-deprecating way. The hesitation and uncertainty about what to do often occur when my roommate and I are cooking. If there are only one or two options, we can decide quickly, but when there are more choices, we start to get caught up in indecision. When faced with decisions, it’s common for someone to yearn for another person who can assist them in making choices. However, when both individuals suffer from “decidophobia,” it becomes even more challenging to come to a decision. As a result, my roommate and I often find ourselves spending a considerable amount of time deliberating on what to cook for dinner, which show to watch while dining, or even who should handle the post-meal cleanup. This indecisiveness sometimes leads to unnecessary delays.<br>Interestingly, I stumbled upon a fascinating technique - flipping a coin. Not only does it provide a means to make a decision, but it also reveals the hidden preference we secretly hope for as the coin is tossed, thus influencing our ultimate choice. Inspired by this revelation, I decided to create a decision-making tool for my roommate and me using P5.js. In this interactive project, my roommate acts as my community of practice, our home serves as the domain, and the primary objective is to assist us in making choices. Following a tutorial by Coding Train, I engaged in coding exercises and developed a captivating slot machine. As the machine spins, various dinner options appear randomly, injecting an element of excitement and amusement into the decision-making process. Moving forward, I’m eager to showcase the interactivity and functionality of this unique creation.</p>
<iframe width="800" height="842"  src="https://editor.p5js.org/ariaranya/full/G0cXs6jAL"></iframe>







<h2 id="Code-and-Comments"><a href="#Code-and-Comments" class="headerlink" title="Code and Comments"></a>Code and Comments</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> machine;</span><br><span class="line"><span class="keyword">let</span> img;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">preload</span>(<span class="params"></span>)&#123;</span><br><span class="line">  img = <span class="title function_">loadImage</span>(<span class="string">&quot;vvv.png&quot;</span>); <span class="comment">// Preload the image &quot;vvv.png&quot; before setup()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">createCanvas</span>(<span class="number">800</span>, <span class="number">800</span>); <span class="comment">// Create a canvas with a size of 800x800 pixels</span></span><br><span class="line">  <span class="title function_">imageMode</span>(<span class="variable constant_">CENTER</span>); <span class="comment">// Set the image mode to center</span></span><br><span class="line">  machine = <span class="keyword">new</span> <span class="title class_">Machine</span>(); <span class="comment">// Create a new instance of the Machine class</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">  machine.<span class="title function_">update</span>(); <span class="comment">// Call the update() method of the machine object</span></span><br><span class="line">  </span><br><span class="line">  <span class="title function_">push</span>(); <span class="comment">// Save the current drawing state</span></span><br><span class="line">  </span><br><span class="line">  <span class="title function_">noStroke</span>(); <span class="comment">// Disable stroke (outline) for subsequent shapes</span></span><br><span class="line">  </span><br><span class="line">  <span class="title function_">fill</span>(<span class="number">255</span>); <span class="comment">// Set the fill color to white (RGB 255, 255, 255)</span></span><br><span class="line">  </span><br><span class="line">  <span class="title function_">rect</span>(<span class="number">0</span>, <span class="number">0</span>, width, <span class="number">170</span>); <span class="comment">// Draw a rectangle at the top of the canvas</span></span><br><span class="line">  </span><br><span class="line">  <span class="title function_">rect</span>(<span class="number">0</span>, <span class="number">320</span>, width, <span class="number">400</span>); <span class="comment">// Draw a rectangle in the middle of the canvas</span></span><br><span class="line">  </span><br><span class="line">  <span class="title function_">pop</span>(); <span class="comment">// Restore the previously saved drawing state</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Display the image at the center of the canvas</span></span><br><span class="line">  <span class="title function_">image</span>(img, width/<span class="number">2</span>, height/<span class="number">2</span>, <span class="number">540</span>, <span class="number">800</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mousePressed</span>(<span class="params"></span>) &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Output the current state of the machine object to the console</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(machine.<span class="property">state</span>); </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Check if the machine is in the &#x27;stopped&#x27; state</span></span><br><span class="line">  <span class="keyword">if</span> (machine.<span class="property">state</span> === <span class="string">&#x27;stopped&#x27;</span>) &#123; </span><br><span class="line">    </span><br><span class="line">    machine = <span class="keyword">new</span> <span class="title class_">Machine</span>(); <span class="comment">// Create a new instance of the Machine class</span></span><br><span class="line">    </span><br><span class="line">    machine.<span class="title function_">spin</span>(); <span class="comment">// Call the spin() method of the machine object</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">     <span class="comment">// Reload the page if the machine is not in the &#x27;stopped&#x27; state</span></span><br><span class="line">    location.<span class="title function_">reload</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ........................................................Reel.js</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Reel</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">machine, x, y, index</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">machine</span> = machine;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reelIndex</span> = index;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reel</span> = [...<span class="variable language_">this</span>.<span class="property">machine</span>.<span class="property">symbols</span>.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>) =&gt;</span> <span class="title function_">random</span>() &lt; <span class="number">0.5</span> ? -<span class="number">1</span> : <span class="number">1</span>)];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">index</span> = <span class="title function_">floor</span>(<span class="variable language_">this</span>.<span class="property">machine</span>.<span class="property">symbols</span>.<span class="property">length</span>/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">offset</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">speed</span> = <span class="variable language_">this</span>.<span class="title function_">randomReelSpeed</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">deceleration</span> = <span class="title function_">random</span>(<span class="variable language_">this</span>.<span class="property">machine</span>.<span class="property">deceleration</span>.<span class="property">min</span>, <span class="variable language_">this</span>.<span class="property">machine</span>.<span class="property">deceleration</span>.<span class="property">max</span>),</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ay</span> = <span class="title function_">random</span>(<span class="variable language_">this</span>.<span class="property">machine</span>.<span class="property">deceleration</span>.<span class="property">min</span>, <span class="variable language_">this</span>.<span class="property">machine</span>.<span class="property">deceleration</span>.<span class="property">max</span>),</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">`stopped`</span>; <span class="comment">// spinning, slowing</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">target</span> = <span class="string">&quot;🫒&quot;</span>; <span class="comment">// random(symbols)</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">randomReelSpeed</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">random</span>(<span class="variable language_">this</span>.<span class="property">machine</span>.<span class="property">startSpeed</span>.<span class="property">min</span>,<span class="variable language_">this</span>.<span class="property">machine</span>.<span class="property">startSpeed</span>.<span class="property">max</span>) - <span class="variable language_">this</span>.<span class="property">reelIndex</span> * -<span class="number">5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">stop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ay</span> = <span class="variable language_">this</span>.<span class="property">deceleration</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">move</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">speed</span> += <span class="variable language_">this</span>.<span class="property">ay</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">abs</span>(<span class="variable language_">this</span>.<span class="property">speed</span>) &lt; <span class="number">5</span> &amp;&amp; <span class="title function_">abs</span>(<span class="variable language_">this</span>.<span class="property">offset</span>) &lt; machine.<span class="property">spacing</span>/<span class="number">8</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">speed</span> = <span class="number">0</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">ay</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">offset</span> += <span class="variable language_">this</span>.<span class="property">speed</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">offset</span> &gt;= machine.<span class="property">spacing</span> / <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">index</span> = <span class="variable language_">this</span>.<span class="property">index</span> &gt; <span class="number">0</span> ? <span class="variable language_">this</span>.<span class="property">index</span> - <span class="number">1</span> : <span class="variable language_">this</span>.<span class="property">reel</span>.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">offset</span> = -machine.<span class="property">spacing</span> / <span class="number">2</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">display</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Display the central (selected) symbol</span></span><br><span class="line">    <span class="keyword">let</span> x = <span class="variable language_">this</span>.<span class="property">x</span>;</span><br><span class="line">    <span class="keyword">let</span> y = <span class="variable language_">this</span>.<span class="property">y</span> + <span class="variable language_">this</span>.<span class="property">offset</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">displaySymbol</span>(<span class="variable language_">this</span>.<span class="property">reel</span>[<span class="variable language_">this</span>.<span class="property">index</span>], x, y, <span class="variable language_">this</span>.<span class="property">index</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Display reel below selected symbol</span></span><br><span class="line">    y = <span class="variable language_">this</span>.<span class="property">y</span> + <span class="variable language_">this</span>.<span class="property">offset</span> + machine.<span class="property">spacing</span>;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="variable language_">this</span>.<span class="property">index</span>;</span><br><span class="line">    <span class="keyword">while</span> (y &lt; height + machine.<span class="property">symbolSize</span>/<span class="number">2</span>) &#123;</span><br><span class="line">      index = (index &lt; <span class="variable language_">this</span>.<span class="property">reel</span>.<span class="property">length</span> - <span class="number">1</span>) ? index + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">displaySymbol</span>(<span class="variable language_">this</span>.<span class="property">reel</span>[index], x, y, index);</span><br><span class="line">      y += machine.<span class="property">spacing</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Display reel above the selected symbol</span></span><br><span class="line">    y = <span class="variable language_">this</span>.<span class="property">y</span> + <span class="variable language_">this</span>.<span class="property">offset</span> - machine.<span class="property">spacing</span>;</span><br><span class="line">    index = <span class="variable language_">this</span>.<span class="property">index</span>;</span><br><span class="line">    <span class="keyword">while</span> (y &gt; <span class="number">0</span> - machine.<span class="property">symbolSize</span>/<span class="number">2</span>) &#123;</span><br><span class="line">      index = (index &gt; <span class="number">0</span>) ? index - <span class="number">1</span> : <span class="variable language_">this</span>.<span class="property">reel</span>.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">displaySymbol</span>(<span class="variable language_">this</span>.<span class="property">reel</span>[index], x, y, index);</span><br><span class="line">      y -= machine.<span class="property">spacing</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">displaySymbol</span>(<span class="params">symbol, x, y, index</span>) &#123;</span><br><span class="line">    <span class="title function_">push</span>();</span><br><span class="line">    <span class="title function_">textSize</span>(machine.<span class="property">symbolSize</span>);</span><br><span class="line">    <span class="title function_">textAlign</span>(<span class="variable constant_">CENTER</span>, <span class="variable constant_">CENTER</span>);</span><br><span class="line">    <span class="title function_">text</span>(symbol, x, y);</span><br><span class="line">    <span class="title function_">pop</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">copy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Make a proper object that will be our copy</span></span><br><span class="line">    <span class="keyword">let</span> copy = <span class="keyword">new</span> <span class="title class_">Reel</span>(<span class="variable language_">this</span>.<span class="property">machine</span>, <span class="variable language_">this</span>.<span class="property">x</span>, <span class="variable language_">this</span>.<span class="property">y</span>, <span class="variable language_">this</span>.<span class="property">reelIndex</span>);</span><br><span class="line">    <span class="comment">// Copy all properties over</span></span><br><span class="line">    <span class="keyword">let</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>);</span><br><span class="line">    keys.<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> copy[key] = <span class="variable language_">this</span>[key]);</span><br><span class="line">    <span class="comment">// Return that copy</span></span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// .........................................................Machine.js</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Machine</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">symbols</span> =[<span class="string">&quot;Dumplings&quot;</span>,<span class="string">&quot;Noodles&quot;</span>,<span class="string">&quot;Rice&quot;</span>,<span class="string">&quot;Photato&quot;</span>,<span class="string">&quot;Tomato&quot;</span>,<span class="string">&quot;Beef&quot;</span>,<span class="string">&quot;Pork&quot;</span>,<span class="string">&quot;Chiken&quot;</span>,<span class="string">&quot;Spicy&quot;</span>,<span class="string">&quot;Sushi&quot;</span>,<span class="string">&quot;BBQ&quot;</span>,<span class="string">&quot;Cabbagies&quot;</span>,<span class="string">&quot;Stephanie&quot;</span>,<span class="string">&quot;Aria&quot;</span>,<span class="string">&quot;movie&quot;</span>,<span class="string">&quot;mengcha&quot;</span>, <span class="string">&quot;Animation&quot;</span>];</span><br><span class="line">    <span class="comment">// Array of symbols for the machine</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">symbolSize</span> = <span class="number">25</span>; <span class="comment">// Size of each symbol</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">spacing</span> = <span class="variable language_">this</span>.<span class="property">symbolSize</span> * <span class="number">5.5</span>; <span class="comment">// Spacing between reels</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">winBarY</span> = height/<span class="number">2</span>; <span class="comment">// y-coordinate of the win bar</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reels</span> = []; <span class="comment">// Array to hold the reel objects</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">startSpeed</span> = &#123;</span><br><span class="line">      <span class="attr">min</span>: <span class="number">20</span>,</span><br><span class="line">      <span class="attr">max</span>: <span class="number">30</span></span><br><span class="line">    &#125;; <span class="comment">// Range of initial spinning speeds for reels</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">deceleration</span> = &#123;</span><br><span class="line">      <span class="attr">min</span>: -<span class="number">0.05</span>,</span><br><span class="line">      <span class="attr">max</span>: -<span class="number">0.1</span></span><br><span class="line">    &#125;; <span class="comment">// Range of deceleration values for slowing down reels</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stopDelay</span> = <span class="title function_">random</span>(<span class="number">90</span>, <span class="number">120</span>); <span class="comment">// Delay before the reels start to slow down</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">`stopped`</span>; <span class="comment">// State of the machine (stopped, spinning, stopping)</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">createReels</span>(<span class="variable language_">this</span>.<span class="property">reels</span>, width/<span class="number">2</span>, <span class="variable language_">this</span>.<span class="property">winBarY</span>); <span class="comment">// Create the reel objects</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">createReels</span>(<span class="params">reels, x, y</span>) &#123;</span><br><span class="line">    <span class="comment">// Create three reel objects and add them to the `reels` array</span></span><br><span class="line">    reels[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Reel</span>(<span class="variable language_">this</span>, x - <span class="variable language_">this</span>.<span class="property">spacing</span>, y, <span class="number">0</span>);</span><br><span class="line">    reels[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Reel</span>(<span class="variable language_">this</span>, x, y, <span class="number">1</span>);</span><br><span class="line">    reels[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Reel</span>(<span class="variable language_">this</span>, x + <span class="variable language_">this</span>.<span class="property">spacing</span>, y, <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Update the state of the machine and display its current state</span></span><br><span class="line">    <span class="title function_">background</span>(<span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable language_">this</span>.<span class="property">state</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">`stopped`</span>:</span><br><span class="line">        <span class="comment">// Machine is stopped, do nothing</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">`spinning`</span>:</span><br><span class="line">        <span class="comment">// Machine is spinning, move the reels and check if they need to stop</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">moveReels</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">stopDelay</span>--;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">stopDelay</span> === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">`stopping`</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">`stopping`</span>:</span><br><span class="line">        <span class="comment">// Machine is slowing down, check the reels and continue moving them</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">checkReels</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">moveReels</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">display</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">checkReels</span>(<span class="params">reels</span>) &#123;</span><br><span class="line">    <span class="comment">// Check if all reels have stopped spinning</span></span><br><span class="line">    <span class="keyword">let</span> allStopped = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">reels</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> reel = <span class="variable language_">this</span>.<span class="property">reels</span>[i];</span><br><span class="line">      <span class="keyword">if</span> (reel.<span class="property">speed</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        allStopped = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">checkReel</span>(reel);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (allStopped) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">`stopped`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">checkReel</span>(<span class="params">reel</span>) &#123;</span><br><span class="line">    <span class="comment">// Check if a reel should stop spinning based on its current position</span></span><br><span class="line">    <span class="keyword">if</span> (reel.<span class="property">speed</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> copyReel = reel.<span class="title function_">copy</span>();</span><br><span class="line">    <span class="keyword">while</span> (copyReel.<span class="property">speed</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      copyReel.<span class="property">ay</span> = copyReel.<span class="property">deceleration</span>;</span><br><span class="line">      copyReel.<span class="title function_">move</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (copyReel.<span class="property">reel</span>[copyReel.<span class="property">index</span>] === copyReel.<span class="property">target</span>) &#123;</span><br><span class="line">      <span class="comment">// The reel would stop on the target symbol</span></span><br><span class="line">      reel.<span class="title function_">stop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">moveReels</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Move all the reels</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">reels</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> reel = <span class="variable language_">this</span>.<span class="property">reels</span>[i];</span><br><span class="line">      reel.<span class="title function_">move</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">display</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Display all the reels and the scoring line</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">reels</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> reel = <span class="variable language_">this</span>.<span class="property">reels</span>[i];</span><br><span class="line">      reel.<span class="title function_">display</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Display the scoring line</span></span><br><span class="line">    <span class="title function_">push</span>();</span><br><span class="line">    <span class="title function_">strokeWeight</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="title function_">stroke</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="comment">// line(0, this.winBarY, width, this.winBarY);</span></span><br><span class="line">    <span class="title function_">pop</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">spin</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Start spinning the reels</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stopDelay</span> = <span class="title function_">floor</span>(<span class="title function_">random</span>(<span class="number">90</span>,<span class="number">120</span>));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reels</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">reel</span> =&gt;</span> &#123;</span><br><span class="line">      reel.<span class="property">speed</span> = reel.<span class="title function_">randomReelSpeed</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">`spinning`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">stop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Stop the reels from spinning</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">`slowing`</span>; <span class="comment">// It should be `stopping`, not `slowing`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="Reference-Links"><a href="#Reference-Links" class="headerlink" title="Reference Links"></a>Reference Links</h2><p><a href="https://www.youtube.com/channel/UCvjgXvBlbQiydffZU7m1_aw">https://www.youtube.com/channel/UCvjgXvBlbQiydffZU7m1_aw</a></p>
]]></content>
      <tags>
        <tag>AT3</tag>
      </tags>
  </entry>
  <entry>
    <title>Creative Coding - Practice 1</title>
    <url>/hello-world.html</url>
    <content><![CDATA[<h2 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h2><p>This exercise involves creating a polka dot pattern that changes the background color as the mouse moves. It uses the <code>loop()</code>. and<code>map()</code>. concepts from the Coding Train tutorial. However, instead of using random colors, I chose to create a gradient of two colors using <code>lerpColor()</code>. This adds an interactive element to the polka dot pattern and makes it more engaging.</p>
<iframe width="600" height="642" src="https://editor.p5js.org/ariaranya/full/VZBMzrCzd"></iframe>




<h2 id="Code-and-Comments"><a href="#Code-and-Comments" class="headerlink" title="Code and Comments"></a>Code and Comments</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The variables of  r and b are set to specific RGB values</span></span><br><span class="line"><span class="keyword">let</span> g = <span class="number">226</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">216</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// runs once, at the start</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// create canvas in 600 pixels wide and 600 pixels tall </span></span><br><span class="line">   <span class="title function_">createCanvas</span>(<span class="number">600</span>, <span class="number">600</span>);</span><br><span class="line"><span class="comment">// no outline</span></span><br><span class="line">   <span class="title function_">noStroke</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// loops, after setup has run </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// declares a variable &quot; bg&quot; </span></span><br><span class="line"><span class="comment">// &quot;bg&quot; equals the result of lerpColor function</span></span><br><span class="line"><span class="comment">// &quot;lerpColor() &quot;function is called to create a dynamic background color that changes based on the position of the mouse.</span></span><br><span class="line">   <span class="keyword">let</span> bg = <span class="title function_">lerpColor</span>(</span><br><span class="line">    </span><br><span class="line"><span class="comment">// set start color - white </span></span><br><span class="line">   <span class="title function_">color</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), </span><br><span class="line">    </span><br><span class="line"><span class="comment">// set end color - lgiht green</span></span><br><span class="line">   <span class="title function_">color</span>(<span class="number">175</span>, <span class="number">222</span>, <span class="number">191</span>),</span><br><span class="line">     </span><br><span class="line"><span class="comment">// mouseX is the horizontal position of the mouse. the width variable represents the width of the canvas.</span></span><br><span class="line"><span class="comment">//mouseX dived width - the result means the &quot;position&quot; between the start and end colors.</span></span><br><span class="line">   mouseX / width);</span><br><span class="line"></span><br><span class="line"><span class="comment">// set background colour as &quot;bg&quot; value</span></span><br><span class="line">   <span class="title function_">background</span>(bg);</span><br><span class="line"></span><br><span class="line"><span class="comment">// nested &quot;for&quot; loop, starting at y coordinate 22 and ending at the height of the canvas, with a spacing of 55 pixels between each row.</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> y = <span class="number">22</span>; y &lt; height; y += <span class="number">55</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// nested &quot;for&quot; loop, tarting at x coordinate 22 and ending at the width of the canvas, with a spacing of 55 pixels between each column.    </span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> x = <span class="number">22</span>; x &lt; width; x += <span class="number">55</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fill colour into circles - yellow</span></span><br><span class="line">   <span class="title function_">fill</span>(<span class="number">225</span>, <span class="number">204</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// calling &quot;ellipse&quot; function to draw a circle at each x,y position specified by the loop variables x and y, with a radius of 20 pixels.   </span></span><br><span class="line">   <span class="title function_">ellipse</span>(x, y, <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Reference-Links"><a href="#Reference-Links" class="headerlink" title="Reference Links"></a>Reference Links</h2><p><a href="https://www.youtube.com/watch?v=nicMAoW6u1g">The Coding Train - The map() Function - p5.js Tutorial</a></p>
<p><a href="https://www.youtube.com/watch?v=1c1_TMdf8b8&t=488s">The Coding Train - 4.2: Nested Loops - p5.js Tutorial</a></p>
<p><a href="https://thecodingtrain.com/tracks/code-programming-with-p5-js">The Coding Train - CODE! PROGRAMMING WITH P5.JS</a></p>
]]></content>
      <tags>
        <tag>Practice - Dots pattern with background colour changes</tag>
      </tags>
  </entry>
</search>
