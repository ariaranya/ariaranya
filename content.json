{"meta":{"title":"Aria's Blog","subtitle":"my works for Creative Coding","description":null,"author":"Aria","url":"https://ariaranya.github.io","root":"/"},"pages":[{"title":"关于本站","date":"2023-06-09T18:22:50.077Z","updated":"2023-06-09T18:22:50.077Z","comments":true,"path":"about/index.html","permalink":"https://ariaranya.github.io/about/index.html","excerpt":"","text":"这是个互联网爱好者个人小站，完全出于兴趣爱好自封互联网研究院院长，乐于分享计算机相关使用方法，推广优质实用软件。所有技术类文章除特别说明外均为本站原创，所提供的软件为院长原创或由网络整理而来。 本院始终坚信： 分享是种美德，好人一生平安！ 本着尊重国家法律的精神，根据中华人民共和国国务院令第632号规定： 第十七条 为了学习和研究软件内含的设计思想和原理，通过安装、显示、传输或者存储软件等方式使用软件的，可以不经软件著作权人许可，不向其支付报酬。 本站所有资源均为学习，交流使用，不得用于任何商业用途。使用的软件请下载后24小时内自行删除，若由于研究学习本站提供文件或链接下载的软件而带来损失，本站不负任何责任。 如果您发现本站侵害了您的版权，请联系院长并出示版权证明，院长将第一时间进行相关处理。 如果您也一样热爱互联网，喜欢捣鼓软件，欢迎评论留言或与院长联系。 QQ群：键盘侠 260489333，点此加群"},{"title":"archives","date":"2020-07-18T05:10:34.000Z","updated":"2023-06-09T18:22:50.077Z","comments":true,"path":"archives/index.html","permalink":"https://ariaranya.github.io/archives/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-08-30T03:41:17.000Z","updated":"2023-06-09T18:22:50.077Z","comments":true,"path":"categories/index.html","permalink":"https://ariaranya.github.io/categories/index.html","excerpt":"","text":""},{"title":"contact","date":"2020-08-30T14:45:09.000Z","updated":"2023-06-09T18:22:50.077Z","comments":true,"path":"contact/index.html","permalink":"https://ariaranya.github.io/contact/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-08-30T14:40:51.000Z","updated":"2023-06-09T18:22:50.081Z","comments":true,"path":"friends/index.html","permalink":"https://ariaranya.github.io/friends/index.html","excerpt":"","text":""},{"title":"","date":"2016-12-31T10:09:56.000Z","updated":"2016-12-31T10:09:56.000Z","comments":false,"path":"history/index.html","permalink":"https://ariaranya.github.io/history/index.html","excerpt":"","text":""},{"title":"友链","date":"2022-05-28T03:09:14.000Z","updated":"2023-06-09T18:22:50.081Z","comments":true,"path":"link/index.html","permalink":"https://ariaranya.github.io/link/index.html","excerpt":"","text":""},{"title":"","date":"2017-02-24T09:37:05.000Z","updated":"2017-02-24T09:37:05.000Z","comments":true,"path":"tags/index.html","permalink":"https://ariaranya.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Creative Coding - AT3","slug":"05","date":"2023-06-05T01:09:09.000Z","updated":"2023-06-09T18:22:50.077Z","comments":true,"path":"05.html","link":"","permalink":"https://ariaranya.github.io/05.html","excerpt":"","text":"ConceptMy inspration comes from Decidophobia, which is occasionally used to describe the situation when someone hesitates or struggles to make decisions. It’s not an officially recognized phobia in the Diagnostic manual. People sometimes use this term in a self-deprecating way. The hesitation and uncertainty about what to do often occur when my roommate and I are cooking. If there are only one or two options, we can decide quickly, but when there are more choices, we start to get caught up in indecision. When faced with decisions, it’s common for someone to yearn for another person who can assist them in making choices. However, when both individuals suffer from “decidophobia,” it becomes even more challenging to come to a decision. As a result, my roommate and I often find ourselves spending a considerable amount of time deliberating on what to cook for dinner, which show to watch while dining, or even who should handle the post-meal cleanup. This indecisiveness sometimes leads to unnecessary delays.Interestingly, I stumbled upon a fascinating technique - flipping a coin. Not only does it provide a means to make a decision, but it also reveals the hidden preference we secretly hope for as the coin is tossed, thus influencing our ultimate choice. Inspired by this revelation, I decided to create a decision-making tool for my roommate and me using P5.js. In this interactive project, my roommate acts as my community of practice, our home serves as the domain, and the primary objective is to assist us in making choices. Following a tutorial by Coding Train, I engaged in coding exercises and developed a captivating slot machine. As the machine spins, various dinner options appear randomly, injecting an element of excitement and amusement into the decision-making process. Moving forward, I’m eager to showcase the interactivity and functionality of this unique creation. Code and Commentslet machine;let img;function preload()&#123; img = loadImage(&quot;vvv.png&quot;); // Preload the image &quot;vvv.png&quot; before setup()&#125;function setup() &#123; createCanvas(800, 800); // Create a canvas with a size of 800x800 pixels imageMode(CENTER); // Set the image mode to center machine = new Machine(); // Create a new instance of the Machine class&#125;function draw() &#123; machine.update(); // Call the update() method of the machine object push(); // Save the current drawing state noStroke(); // Disable stroke (outline) for subsequent shapes fill(255); // Set the fill color to white (RGB 255, 255, 255) rect(0, 0, width, 170); // Draw a rectangle at the top of the canvas rect(0, 320, width, 400); // Draw a rectangle in the middle of the canvas pop(); // Restore the previously saved drawing state // Display the image at the center of the canvas image(img, width/2, height/2, 540, 800); &#125;function mousePressed() &#123; // Output the current state of the machine object to the console console.log(machine.state); // Check if the machine is in the &#x27;stopped&#x27; state if (machine.state === &#x27;stopped&#x27;) &#123; machine = new Machine(); // Create a new instance of the Machine class machine.spin(); // Call the spin() method of the machine object &#125; else &#123; // Reload the page if the machine is not in the &#x27;stopped&#x27; state location.reload(); &#125; &#125;// ........................................................Reel.jsclass Reel &#123; constructor(machine, x, y, index) &#123; this.machine = machine; this.x = x; this.y = y; this.reelIndex = index; this.reel = [...this.machine.symbols.sort((a,b) =&gt; random() &lt; 0.5 ? -1 : 1)]; this.index = floor(this.machine.symbols.length/2); this.offset = 0; this.speed = this.randomReelSpeed(); this.deceleration = random(this.machine.deceleration.min, this.machine.deceleration.max), this.ay = random(this.machine.deceleration.min, this.machine.deceleration.max), this.state = `stopped`; // spinning, slowing this.target = &quot;🫒&quot;; // random(symbols) &#125; randomReelSpeed() &#123; return random(this.machine.startSpeed.min,this.machine.startSpeed.max) - this.reelIndex * -5; &#125; stop() &#123; this.ay = this.deceleration; &#125; move() &#123; this.speed += this.ay; if (abs(this.speed) &lt; 5 &amp;&amp; abs(this.offset) &lt; machine.spacing/8) &#123; this.speed = 0; this.ay = 0; &#125; else &#123; this.offset += this.speed; if (this.offset &gt;= machine.spacing / 2) &#123; this.index = this.index &gt; 0 ? this.index - 1 : this.reel.length - 1; this.offset = -machine.spacing / 2; &#125; &#125; &#125; display() &#123; // Display the central (selected) symbol let x = this.x; let y = this.y + this.offset; this.displaySymbol(this.reel[this.index], x, y, this.index); // Display reel below selected symbol y = this.y + this.offset + machine.spacing; let index = this.index; while (y &lt; height + machine.symbolSize/2) &#123; index = (index &lt; this.reel.length - 1) ? index + 1 : 0; this.displaySymbol(this.reel[index], x, y, index); y += machine.spacing; &#125; // Display reel above the selected symbol y = this.y + this.offset - machine.spacing; index = this.index; while (y &gt; 0 - machine.symbolSize/2) &#123; index = (index &gt; 0) ? index - 1 : this.reel.length - 1; this.displaySymbol(this.reel[index], x, y, index); y -= machine.spacing; &#125; &#125; displaySymbol(symbol, x, y, index) &#123; push(); textSize(machine.symbolSize); textAlign(CENTER, CENTER); text(symbol, x, y); pop(); &#125; copy() &#123; // Make a proper object that will be our copy let copy = new Reel(this.machine, this.x, this.y, this.reelIndex); // Copy all properties over let keys = Object.keys(this); keys.forEach(key =&gt; copy[key] = this[key]); // Return that copy return copy; &#125; &#125; // .........................................................Machine.js class Machine &#123; constructor() &#123; this.symbols =[&quot;Dumplings&quot;,&quot;Noodles&quot;,&quot;Rice&quot;,&quot;Photato&quot;,&quot;Tomato&quot;,&quot;Beef&quot;,&quot;Pork&quot;,&quot;Chiken&quot;,&quot;Spicy&quot;,&quot;Sushi&quot;,&quot;BBQ&quot;,&quot;Cabbagies&quot;,&quot;Stephanie&quot;,&quot;Aria&quot;,&quot;movie&quot;,&quot;mengcha&quot;, &quot;Animation&quot;]; // Array of symbols for the machine this.symbolSize = 25; // Size of each symbol this.spacing = this.symbolSize * 5.5; // Spacing between reels this.winBarY = height/2; // y-coordinate of the win bar this.reels = []; // Array to hold the reel objects this.startSpeed = &#123; min: 20, max: 30 &#125;; // Range of initial spinning speeds for reels this.deceleration = &#123; min: -0.05, max: -0.1 &#125;; // Range of deceleration values for slowing down reels this.stopDelay = random(90, 120); // Delay before the reels start to slow down this.state = `stopped`; // State of the machine (stopped, spinning, stopping) this.createReels(this.reels, width/2, this.winBarY); // Create the reel objects &#125; createReels(reels, x, y) &#123; // Create three reel objects and add them to the `reels` array reels[0] = new Reel(this, x - this.spacing, y, 0); reels[1] = new Reel(this, x, y, 1); reels[2] = new Reel(this, x + this.spacing, y, 2); &#125; update() &#123; // Update the state of the machine and display its current state background(255); switch (this.state) &#123; case `stopped`: // Machine is stopped, do nothing break; case `spinning`: // Machine is spinning, move the reels and check if they need to stop this.moveReels(); this.stopDelay--; if (this.stopDelay === 0) &#123; this.state = `stopping`; &#125; break; case `stopping`: // Machine is slowing down, check the reels and continue moving them this.checkReels(); this.moveReels(); break; &#125; this.display(); &#125; checkReels(reels) &#123; // Check if all reels have stopped spinning let allStopped = true; for (let i = 0; i &lt; this.reels.length; i++) &#123; let reel = this.reels[i]; if (reel.speed &gt; 0) &#123; allStopped = false; &#125; this.checkReel(reel); &#125; if (allStopped) &#123; this.state = `stopped`; &#125; &#125; checkReel(reel) &#123; // Check if a reel should stop spinning based on its current position if (reel.speed === 0) &#123; return; &#125; let copyReel = reel.copy(); while (copyReel.speed &gt; 0) &#123; copyReel.ay = copyReel.deceleration; copyReel.move(); &#125; if (copyReel.reel[copyReel.index] === copyReel.target) &#123; // The reel would stop on the target symbol reel.stop(); &#125; &#125; moveReels() &#123; // Move all the reels for (let i = 0; i &lt; this.reels.length; i++) &#123; let reel = this.reels[i]; reel.move(); &#125; &#125; display() &#123; // Display all the reels and the scoring line for (let i = 0; i &lt; this.reels.length; i++) &#123; let reel = this.reels[i]; reel.display(); &#125; // Display the scoring line push(); strokeWeight(5); stroke(255, 255, 0, 100); // line(0, this.winBarY, width, this.winBarY); pop(); &#125; spin() &#123; // Start spinning the reels this.stopDelay = floor(random(90,120)); this.reels.forEach(reel =&gt; &#123; reel.speed = reel.randomReelSpeed(); &#125;); this.state = `spinning`; &#125; stop() &#123; // Stop the reels from spinning this.state = `slowing`; // It should be `stopping`, not `slowing` &#125;&#125; Reference Linkshttps://www.youtube.com/channel/UCvjgXvBlbQiydffZU7m1_aw","categories":[],"tags":[{"name":"AT3","slug":"AT3","permalink":"https://ariaranya.github.io/tags/AT3/"}]},{"title":"Creative Coding - AT2 April's loop","slug":"19","date":"2023-05-19T01:09:09.000Z","updated":"2023-06-09T18:22:50.077Z","comments":true,"path":"19.html","link":"","permalink":"https://ariaranya.github.io/19.html","excerpt":"","text":"Conceptnet art webiste link: https://ariaranya-ariania-netart.deno.dev/ The inspiration for this net art work derives from a serendipitous encounter with a song titled “April’s Loop” by Numcha. The song’s ambiance resonated deeply with me, and its title evoked thoughts of everyday life in April. Despite the repetitive nature of daily routines, each day holds the potential for unique experiences, or the ability to break the monotony through mindful appreciation. Hence, I sought to convey my emotions and sensations through this piece. In this artwork, you will find continuously rotating circles, akin to the flow of time. The colors and patterns employed represent the emotions stirred by the song and the subtle nuances of everyday life. By pressing the mouse button, you can rotate the circles counterclockwise, while moving the mouse away accelerates their rotation. This duality reflects our occasional desire for certain moments to repeat, while simultaneously longing for time to hasten its pace. From a technical standpoint, I endeavored to realize abstract visual effects through creative programming. Additionally, I incorporated mouse interactions. When you press and rotate the mouse counterclockwise, the music ceases, resuming upon release. While this artwork may possess technical imperfections, it served as an enjoyable exploration of creative possibilities. Code and Comments123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165let img; // Variable to store an imagelet img2; // Variable to store an imagelet a = 0; // Angle variablelet radius; // Variable to store the radius of the gradientlet index = 0; // Index variablelet a2 = 30; // Angle variablelet col = []; // Array to store colorslet isMousePressed = false; // Boolean variable to track mouse presslet bgMusic; // Variable to store background musiclet isMusicPlaying = false; // Boolean variable to track if music is playingfunction preload() &#123; bgMusic = loadSound(&quot;bg_music.mp3&quot;); // Preload the background music&#125;// loops, after setup has runfunction setup() &#123; createCanvas(600, 600); // Creates a canvas with a size of 600x600 pixels img = loadImage(&quot;img.jpg&quot;); // Load an image radius = width * 0.35; // Set the radius based on canvas width // Define colors let col1 = color(255, 242, 197); let col2 = color(252, 232, 225); let col3 = color(197, 210, 23, 50); col = [col1, col2, col3]; // Store colors in an array angleMode(DEGREES); // Set angle mode to degrees // Play background music bgMusic.loop(); bgMusic.stop(); // Stop the music initially&#125;// loops, after setup has runfunction draw() &#123; if (isMousePressed) &#123; a -= 0.4; // Decrease angle by 0.4 if mouse is pressed // a = a-0.4 if (isMusicPlaying) &#123; bgMusic.pause(); // Pause the music if mouse is pressed isMusicPlaying = false; &#125; &#125; else &#123; a += 0.4; // Increase angle by 0.4 if mouse is not pressed // a = a+0.4 if (!isMusicPlaying) &#123; bgMusic.loop(); // Continue playing the music if not already playing isMusicPlaying = true; &#125; &#125; a2 += map(mouseX, 0, width, 0.2, 1); // Map mouse position to change a2 angle let centerX = width / 2; // Calculate center X coordinate let centerY = height / 2; // Calculate center Y coordinate // The if statement checks if the value of a is divisible by 30 without a remainder (a % 30 === 0). if (a % 30 === 0) &#123; index += 1; // Increment index every 30 degrees // index = index + 1 &#125; let ctx = drawingContext; // Get the drawing context of the canvas const gradient = ctx.createRadialGradient( width / 2, height / 2, 20, width / 2, height / 2, radius ); // Create a radial gradient // Define gradient colors using noise and mathematical expressions gradient.addColorStop(0, &quot;#B9BEDE&quot;); gradient.addColorStop(0.5 * noise(frameCount * 0.004), &quot;white&quot;); gradient.addColorStop(0.56 * noise(frameCount * 0.007), &quot;#F2E3E4&quot;); gradient.addColorStop(0.7 * noise(frameCount * 0.009), &quot;#E3D2D4&quot;); gradient.addColorStop(0.8, &quot;#E0C3C3&quot;); gradient.addColorStop(0.9 * noise(frameCount * 0.008), &quot;#D8E2F1&quot;); gradient.addColorStop(0.9 * noise(frameCount * 0.01), &quot;#FFE364&quot;); gradient.addColorStop(0.9, &quot;#E2D1E2&quot;); gradient.addColorStop(1, &quot;#F8F6F4&quot;); // The for loop for (let i = 0; i &lt; radius * 1; i += 0.1) &#123; let x = int(centerX + i * cos(a2)); // Calculate X coordinate based on angle and radius let y = int(centerY + i * sin(a2)); // Calculate Y coordinate based on angle and radius ctx.fillStyle = gradient; // Set fill style to the defined gradient noStroke(); // Disable stroke circle(x, y, 2); // Draw a small circle at (x, y) with a diameter of 2 &#125; if (random() &lt; 0.01) &#123; index += 1; // Increment index randomly &#125; for (let i = 0; i &lt; radius * 0.5; i += 0.01) &#123; let x = int(centerX + i * cos(a)); // Calculate X coordinate based on angle and radius let y = int(centerY + i * sin(a)); // Calculate Y coordinate based on angle and radius if (i &lt; 15) &#123; stroke(col[index % 3]); // Set stroke color based on index &#125; else if (i &lt; 30) &#123; stroke(col[(index + 1) % 3]); // Set stroke color based on index &#125; else if (i &lt; 45) &#123; stroke(col[(index + 2) % 3]); // Set stroke color based on index &#125; else if (i &lt; 70) &#123; stroke(col[(index + 4) % 3]); // Set stroke color based on index &#125; point(x, y); // Draw a point at (x, y) &#125; //The for loop for (let i = radius * 0.5; i &lt; radius * 0.8; i += 0.2) &#123; let x = int(centerX + i * cos(a)); // Calculate X coordinate based on angle and radius let y = int(centerY + i * sin(a)); // Calculate Y coordinate based on angle and radius let colorStart = color(224, 195, 195, 80); // Define start color let colorEnd = color(247, 236, 240); // Define end color let t = map(i, radius * 0.7, radius * 0.3, 0, 1); // Map t value based on radius // Generate a lerped color with noise and mathematical expressions let lerpedColor = lerpColor( colorStart, colorEnd, t + 0.3 * noise(frameCount * 0.001) ); strokeWeight(2); // Set stroke weight to 2 pixels stroke(lerpedColor); // Set stroke color to the lerped color point(x, y); // Draw a point at (x, y) &#125; // The for loop for (let i = radius * 0.8; i &lt;= radius; i++) &#123; let x = int(centerX + i * cos(a)); // Calculate X coordinate based on angle and radius let y = int(centerY + i * sin(a)); // Calculate Y coordinate based on angle and radius let pixelColor = img.get(x, y); // Get the color of the pixel from the image stroke(pixelColor); // Set stroke color to the pixel color point(x, y); // Draw a point at (x, y) &#125;&#125;function mousePressed() &#123; isMousePressed = true; // Set isMousePressed to true when the mouse is pressed&#125;function mouseReleased() &#123; isMousePressed = false; // Set isMousePressed to false when the mouse is released&#125; Reference Linkshttps://qianqian-ye.com/Everyday/Day27/","categories":[],"tags":[{"name":"AT2","slug":"AT2","permalink":"https://ariaranya.github.io/tags/AT2/"}]},{"title":"Creative Coding - Practice 7","slug":"18 copy","date":"2023-05-18T01:09:09.000Z","updated":"2023-06-09T18:22:50.077Z","comments":true,"path":"18 copy.html","link":"","permalink":"https://ariaranya.github.io/18%20copy.html","excerpt":"","text":"ConceptThis exercise is a derivative of the previous bubble exercise. Building upon its existing functionality, I added sliders that allow adjusting the size of the circles and the stroke weight. Additionally, I introduced a delay in the bubble generation, making the process appear more natural and dynamic. This enhancement adds more interactivity compared to before, making it more engaging and enjoyable. By refining and modifying previous exercises, my aim is to gain a better understanding of coding logic and enhance my ability to independently program. It serves as a means to further explore the intricacies of coding while simultaneously honing my programming skills. Code and Comments1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465let slider1, slider2;let cirs = [];// loops, after setup has runfunction setup() &#123; createCanvas(600, 600); // Creates a canvas with a size of 600x600 pixels colorMode(HSB, 360, 100, 100); // Sets the color mode to HSB slider1 = createSlider(1, 100, 10); // Creates a slider for circle size, range: 1 to 100, initial value: 10 slider1.position(10, height - 60); // Positions the slider on the canvas slider1.style(&quot;width&quot;, &quot;120px&quot;); // Sets the width of the slider slider2 = createSlider(1, 20, 1); // Creates a slider for stroke weight, range: 1 to 20, initial value: 1 slider2.position(10, height - 40); // Positions the slider on the canvas slider2.style(&quot;width&quot;, &quot;120px&quot;); // Sets the width of the slider&#125;// loops, after setup has runfunction draw() &#123; background(220); // Clears the background to light gray (220) textSize(15); textAlign(LEFT, CENTER); fill(0); noStroke(); text(&quot;circle size&quot;, 140, height - 60 + 10); // Displays label for circle size slider text(&quot;stroke weight&quot;, 140, height - 40 + 10); // Displays label for stroke weight slider for (let i = 0; i &lt; cirs.length; i++) &#123; cirs[i].display(); // Displays each circle in the cirs array by calling their display() method &#125;&#125;function keyPressed() &#123; if (key == &quot; &quot;) &#123; cirs = []; // If the spacebar is pressed, the cirs array is emptied (all circles are removed) &#125;&#125;function mousePressed() &#123; let createNum = int(random(5, 10)); // Generates a random number between 5 and 10 for (let i = 0; i &lt; createNum; i++) &#123; let cx, cy, cs; cx = mouseX + random(-50, 50); // Randomizes the x position of the circle around the mouse position cy = mouseY + random(-50, 50); // Randomizes the y position of the circle around the mouse position cs = random(1, slider1.value()); // Randomizes the size of the circle between 1 and the value of slider1 cirs.push(new Circle(cx, cy, cs)); // Creates a new Circle object with the randomized values and adds it to the cirs array &#125;&#125;class Circle &#123; constructor(x, y, s) &#123; this.x = x; // Stores the x position of the circle this.y = y; // Stores the y position of the circle this.size = s; // Stores the size of the circle this.col = color(random(200, 230), random(20, 100), 100); // Generates a random color for the circle using the HSB color mode this.wei = slider2.value(); // Sets the stroke weight of the circle to the value of slider2 &#125; display() &#123; noFill(); // Sets the fill of the circle to none stroke(this.col); // Sets the stroke color of the circle using the generated color strokeWeight(this.wei); // Sets the stroke weight of the circle ellipse(this.x, this.y, this.size, this.size); // Draws the circle on the canvas using the ellipse() function &#125;&#125; Reference LinksThe Coding Train","categories":[],"tags":[{"name":"Practice - Bubble 2","slug":"Practice-Bubble-2","permalink":"https://ariaranya.github.io/tags/Practice-Bubble-2/"}]},{"title":"Creative Coding - Practice 8","slug":"18","date":"2023-05-18T01:09:09.000Z","updated":"2023-06-09T18:22:50.077Z","comments":true,"path":"18.html","link":"","permalink":"https://ariaranya.github.io/18.html","excerpt":"","text":"ConceptThis artwork is a visualization of an L-system, which is a mathematical system used to generate complex and self-similar patterns. The L-system in this code uses a set of rules to iteratively replace symbols in a string, resulting in a sequence of instructions for drawing. I find it highly creative to simulate the growth of plants using an L-system. Implementing such a growth animation through code is particularly special and it’s something I aspire to master. The utilization of lerping, for example, demonstrates a unique approach. Code and Comments123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185// Surrond items that we want to lerp with () in the rules// () characters are then stripped from the next generationconst rules = &#123; X: [ // Original rule &#123; rule: &quot;(F[+X][-X]FX)&quot;, prob: 0.5 &#125;, // Fewer limbs &#123; rule: &quot;(F[-X]FX)&quot;, prob: 0.05 &#125;, &#123; rule: &quot;(F[+X]FX)&quot;, prob: 0.05 &#125;, // Extra rotation &#123; rule: &quot;(F[++X][-X]FX)&quot;, prob: 0.1 &#125;, &#123; rule: &quot;(F[+X][--X]FX)&quot;, prob: 0.1 &#125;, // Berries/fruits &#123; rule: &quot;(F[+X][-X]FXA)&quot;, prob: 0.1 &#125;, &#123; rule: &quot;(F[+X][-X]FXB)&quot;, prob: 0.1 &#125; ], F: [ // Original rule &#123; rule: &quot;F(F)&quot;, prob: 0.85 &#125;, // Extra growth &#123; rule: &quot;F(FF)&quot;, prob: 0.05 &#125;, // Stunted growth &#123; rule: &quot;F&quot;, prob: 0.1 &#125;, ], &quot;(&quot;: &quot;&quot;, &quot;)&quot;: &quot;&quot;&#125;;const len = 4;const ang = 25;let drawRules;let word = &quot;X&quot;;const maxGeneration = 6;let currGeneration = 0;let growthPercent = 1;const growthRate = 0.04;function setup() &#123; createCanvas(600, 600); strokeWeight(2); drawRules = &#123; &quot;A&quot;: (t) =&gt; &#123; // Draw circle at current location noStroke(); fill(&quot;#E5CEDC&quot;); circle(0, 0, len*2 * t); &#125;, &quot;B&quot;: (t) =&gt; &#123; // Draw circle at current location noStroke(); fill(&quot;#FCA17D&quot;); circle(0, 0, len*2 * t); &#125;, &quot;F&quot;: (t) =&gt; &#123; // Draw line forward, then move to end of line stroke(&quot;#9ea93f&quot;); line(0, 0, 0, -len * t); translate(0, -len * t); &#125;, &quot;+&quot;: (t) =&gt; &#123; // Rotate right rotate(PI/180 * -ang * t); &#125;, &quot;-&quot;: (t) =&gt; &#123; // Rotate right rotate(PI/180 * ang * t); &#125;, // Save current location &quot;[&quot;: push, // Restore last location &quot;]&quot;: pop, &#125;;&#125;function draw() &#123; background(28); if(growthPercent &lt; 1) &#123; const mod = (currGeneration + growthPercent); growthPercent += growthRate/mod; &#125; else &#123; nextGeneration(); &#125; drawLsysLerp(width/2, height, word, growthPercent);&#125;function mouseReleased() &#123; nextGeneration();&#125;function nextGeneration() &#123; if(growthPercent &lt; 1) &#123; return; &#125; if(currGeneration === maxGeneration) &#123; currGeneration = 0; word = &quot;X&quot;; &#125; word = generate(word); currGeneration ++; growthPercent = 0;&#125;function generate(word) &#123; let next = &quot;&quot; for(let i = 0; i &lt; word.length; i ++) &#123; let c = word[i]; if(c in rules) &#123; let rule = rules[c]; // Check if we&#x27;re using an array or not if(Array.isArray(rule)) &#123; next += chooseOne(rule); // If we are, choose one of the options &#125; else &#123; next += rules[c]; // Otherwise use the rule directly &#125; &#125; else &#123; next += c; &#125; &#125; return next;&#125;function chooseOne(ruleSet) &#123; let n = random(); // Random number between 0-1 let t = 0; for(let i = 0; i &lt; ruleSet.length; i++) &#123; t += ruleSet[i].prob; // Keep adding the probability of the options to total if(t &gt; n) &#123; // If the total is more than the random value return ruleSet[i].rule; // Choose that option &#125; &#125; return &quot;&quot;;&#125;function drawLsysLerp(x, y, state, t) &#123; t = constrain(t, 0, 1); let lerpOn = false; push(); translate(x, y); for(let i = 0; i &lt; state.length; i ++) &#123; let c = state[i]; if(c === &quot;(&quot;) &#123; lerpOn = true; continue; &#125; if(c === &quot;)&quot;) &#123; lerpOn = false; continue; &#125; let lerpT = t; if(!lerpOn) &#123; lerpT = 1; &#125; if(c in drawRules) &#123; drawRules[c](lerpT); &#125; &#125; pop();&#125; Reference LinksGrowing Procedural Plants in P5js (L System Linear Interpolation)","categories":[],"tags":[{"name":"Practice -","slug":"Practice","permalink":"https://ariaranya.github.io/tags/Practice/"}]},{"title":"Creative Coding - Practice 6","slug":"17","date":"2023-05-17T01:09:09.000Z","updated":"2023-06-09T18:22:50.077Z","comments":true,"path":"17.html","link":"","permalink":"https://ariaranya.github.io/17.html","excerpt":"","text":"ConceptThis is an exercise in mouse and keyboard interaction. Circles are generated around the mouse position, and their position, size, and color are randomized. Each time the mouse is pressed, a random number of circles is created, resulting in a dynamic and unpredictable arrangement. The circles are displayed with varying stroke weights and vibrant colors, adding energy and liveliness to the composition. Pressing the spacebar clears the canvas and starts over. I believe this kind of interaction may appear in future artworks, so I have been practicing it. Code and Comments123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051let cirs = []; // An array to store circle objectsfunction setup() &#123; createCanvas(600, 600); // Creates a canvas with a size of 600x600 pixels colorMode(HSB, 360, 100, 100); // Sets the color mode to HSB&#125;function draw() &#123; background(220); // Clears the background to light gray (220) for (let i = 0; i &lt; cirs.length; i++) &#123; cirs[i].display(); // Displays each circle in the cirs array by calling their display() method &#125;&#125;function keyPressed() &#123; if (key == &quot; &quot;) &#123; cirs = []; // If the spacebar is pressed, the cirs array is emptied (all circles are removed) &#125;&#125;function mousePressed() &#123; let createNum = int(random(5, 10)); // Generates a random number between 5 and 10 for (let i = 0; i &lt; createNum; i++) &#123; let cx, cy, cs; // Variables for circle position and size cx = mouseX + random(-50, 50); // Randomizes the x position of the circle around the mouse position cy = mouseY + random(-50, 50); // Randomizes the y position of the circle around the mouse position cs = random(1, 20); // Randomizes the size of the circle between 1 and 20 cirs.push(new Circle(cx, cy, cs)); // Creates a new Circle object with the randomized values and adds it to the cirs array &#125;&#125;class Circle &#123; constructor(x, y, s) &#123; this.x = x; // Stores the x position of the circle this.y = y; // Stores the y position of the circle this.size = s; // Stores the size of the circle this.col = color(random(200, 230), random(20, 100), 100); // Generates a random color for the circle using the HSB color mode this.wei = 2; // Sets the stroke weight of the circle to 2 &#125; display() &#123; noFill(); // Sets the fill of the circle to none stroke(this.col); // Sets the stroke color of the circle using the generated color strokeWeight(this.wei); // Sets the stroke weight of the circle ellipse(this.x, this.y, this.size, this.size); // Draws the circle on the canvas using the ellipse() function &#125;&#125; Reference LinksThe Coding Train","categories":[],"tags":[{"name":"Practice - bubbles","slug":"Practice-bubbles","permalink":"https://ariaranya.github.io/tags/Practice-bubbles/"}]},{"title":"Creative Coding - Practice 5","slug":"16","date":"2023-05-16T01:09:09.000Z","updated":"2023-06-09T18:22:50.077Z","comments":true,"path":"16.html","link":"","permalink":"https://ariaranya.github.io/16.html","excerpt":"","text":"ConceptThis exercise is based on the tutorial by “The Coding Train” on star field and explores the implementation of the concept called “wrape speed.” When I saw the artist’s work, I thought it would be interesting to create a rainy day background using a similar effect. I believe it would be an intriguing experiment to use creative coding to achieve a specific visual presentation. If I were to add rain sound effects in the future, I believe it would enhance the emotional immersion of this exercise. Code and Comments123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129// defines a class named &quot;Rain&quot;class Rain&#123; // constructor function initializes the properties of the raindrop object constructor()&#123; this.x = random(0, width); // x-coordinate of the raindrop&#x27;s position //random value between 0 and width of the canvas this.y = random(0,height); // y-coordinate of the raindrop&#x27;s position // random value between 0 and height of the canvas this.r = random(0,350) / 100; // radius = divides random value from 0-350 by 100 this.z = random(0, width); // the distance of the raindrop from the viewer (z) // random value between 0 and width of the canvas. this.pz = this.z; // sets the previous value of &quot;z&quot; to the current value of &quot;z&quot; this.t = random(45, 100); //transparency(t) of the raindrop //random value between 45 and 100 &#125; // updating the raindrop&#x27;s position based on the speed variable update()&#123; this.z -= speed; // z = z-speed if (this.z &lt; 1)&#123; // if this.z less than 1, the following actions are performed // this.x = random value within the range of: // negative width to positive width this.x = random(-width, width); // this.y = random value within the range of: // negative height to positive height this.y = random(-height,height); // this.r = random value between 0 and 250, divided by 100 this.r = random(0,250) / 100; // this.z = random value within the range of 0 to the width of the canvas this.z = random(0, width); //updates the previous z value (pz) to the current z value this.pz = this.z; &#125; &#125; // displaying the raindrop on the canvas show()&#123; fill(255, this.t); // fill colors for raindrop in white //with this.transparency noStroke(); // no stroke, only have fill colors // sx - scaled x-coordinate // maps this.x position divided by this.z value // from 0-1 and 0 to the width of the canvas let sx = map(this.x / this. z, 0, 1, 0, width) // sy - scaled y-coordinate // maps this.y position divided by this.z value // from 0-1 and 0 to the height of the canvas let sy = map(this.y / this. z, 0, 1, 0, height) // draws an ellipse on the canvas at the position // specified by sx and sy with this. r(radius) of the raindrop ellipse(sx, sy, this.r, this.r); // maps this.x position divided by its previous z value (pz) // from 0-1 and the range of 0 to the width of the canvas let px = map(this. x / this.pz, 0, 1, 0, width) // maps this.y position divided by its previous z value (pz) // from 0-1 and the range of 0 to the height of the canvas let py = map(this. y / this.pz, 0, 1, 0, height) // updates the previous z value (pz) to the current z value this.pz = this.z; // sets the stroke in white and with this.transparency stroke(255, this.t); // draws a line segment between the current position (sx, sy) and // the previous position (px, py) line(sx, sy, px, py); &#125; &#125;let raindrop = [] // declares an empty array called&quot; raindrop&quot; let speed; // declares a variable &quot;speed&quot; let bg; // eclares a variable &quot;bg&quot;function setup() &#123; // runs once, at the start createCanvas(600, 500); // create a canvas in 600px wide and 500px tall bg = loadImage(&#x27;1.jpg&#x27;); // loads an image file named &quot;1.jpg&quot; background(bg); //sets loaded image as background // for loop for (let i = 0; i &lt; 800; i++)&#123;// let i = 0; i less than 800; i = i+1 raindrop[i] = new Rain();//creates a new instance of the Rain class //assigns it to the i-th index of the raindrop array &#125; &#125;function draw() &#123; // loops, after setup has run background(bg); // set background by using &quot;bg&quot;- loaded image translate(width / 2, height / 2); // translates to the（center of the canvas） // maps the current mouseX position to a value between 0 and 50 speed = map(mouseX, 0, width, 0, 50); // this loop iterates over each raindrop in the raindrop array for (let i = 0; i &lt; raindrop. length; i++)&#123; // i = 0, i less than raindrop. length // i = i+1 // calls the update() method of the Rain instance at index &quot;i&quot; raindrop[i].update(); // calls the show() method of the Rain instance at index &quot;i&quot; raindrop[i].show(); &#125;&#125; Reference LinksThe Coding Train","categories":[],"tags":[{"name":"Practice - rainning day","slug":"Practice-rainning-day","permalink":"https://ariaranya.github.io/tags/Practice-rainning-day/"}]},{"title":"Creative Coding - Practice 4","slug":"15","date":"2023-05-15T01:09:09.000Z","updated":"2023-06-09T18:22:50.077Z","comments":true,"path":"15.html","link":"","permalink":"https://ariaranya.github.io/15.html","excerpt":"","text":"Concept This exercise is for learning and conceptual understanding of Perlin Noise Flow Field. I feel that Flow Field has a futuristic sci-fi vibe and it can be seen in many digital artworks where artists employ Perlin Noise and Flow Field. Therefore, I hope to be able to incorporate it into my future works through this exercise. Code and Comments123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108// Variable Declarationsvar points = []; // an array that will store the positions of the particles.var mult; // mult is used to control the movement of the particles based on noise.var r1, r2, g1, g2, b1, b2; // define the color range for the particles.// loops, after setup has runfunction setup() &#123; createCanvas(600, 600); // create a canvas with 600px wide and 600px tall background(255); // fill background color in white angleMode(DEGREES); // sets the angle mode to degrees noiseDetail(1); // sets the level of detail for the Perlin noise function var density = 20; // set density equal 20 var space = width / density; // space will be 600 / 20 = 30 // For loops generate the initial positions of the particles based on a grid // Each particle is slightly offset //The outer for loop iterates over the x-coordinates in the grid. //The inner for loop iterates over the y-coordinates in the grid. for (var x = 0; x &lt; width; x += space) &#123; // variable x equal to 0 // as x less than the width of canvas // x equal to x plus space for (var y = 0; y &lt; height; y += space) &#123; // variable y equal to 0 // as y less than the height of canvas // y equal to y plus space // create a new particle position vector //The x-coordinate of the particle is x + random(-10, 10). //The y-coordinate of the particle is y + random(-10, 10) var p = createVector(x + random(-10, 10), y + random(-10, 10)); points.push(p); // &quot;p&quot; is added to the points array &#125; &#125; // assigned random values to define the color ranges for the particles r1 = random(255); r2 = random(255); g1 = random(255); g2 = random(255); b1 = random(255); b2 = random(255); mult = random(0.002, 0.01); // assigned a random value between 0.002 and 0.01 &#125; // loops, after setup has runfunction draw() &#123; noStroke(); // no stroke, only have fill colors // The for loop iterates over each particle in the points array // function is used to map the values of points[i].x and points[i].y // to the color ranges defined by r1, r2, g1, g2, b1, and b2 for (var i = 0; i &lt; points.length; i++) &#123; var r = map(points[i].x, 0, width, r1, r2); var g = map(points[i].y, 0, height, g1, g2); var b = map(points[i].x, 0, width, b1, b2); // variavle alpha to create a fade effect // The dist() function calculates the distance between the center of the canvas and each point. //The map() function is used to convert this distance to a new range of values. // The original range is from 0 to 350 // The new range is from 400 to 0 var alpha = map(dist(width / 2, height / 2, points[i].x, points[i].y), 0, 350, 400, 0); // fill colors based on the caculated value of r, g, b, alpha fill(r, g, b, alpha); // function converts this noise value from the range 0 to 1 // to an angle in degrees, ranging from 0 to 720. var angle = map(noise(points[i].x * mult, points[i].y * mult), 0, 1, 0, 720); // Updates the position of the current point points[i].add(createVector(cos(angle), sin(angle))); // if distance less than 350 draw a small ellipse if (dist(width / 2, height / 2, points[i].x, points[i].y) &lt; 350) &#123; ellipse(points[i].x, points[i].y, 1); // x coordinate = point[i].x // y coordinate = point[i].y // the width &amp; height of ellipse = 1 &#125; &#125;&#125; Reference LinksColorful CodingThe Coding Train","categories":[],"tags":[{"name":"Practice - flow filed","slug":"Practice-flow-filed","permalink":"https://ariaranya.github.io/tags/Practice-flow-filed/"}]},{"title":"Assignments 1 p5 Sketch - Banner Design","slug":"30 copy","date":"2023-03-30T01:09:09.000Z","updated":"2023-06-09T18:22:50.077Z","comments":true,"path":"30 copy.html","link":"","permalink":"https://ariaranya.github.io/30%20copy.html","excerpt":"","text":"ConceptThe technology used in this project is largely derived from previous exercises, with some deepening and refinement of concepts such as variables, iteration, conditional logic, custom functions, arrays, and classes. The inspiration comes from Pop Art, with the use of polka dot elements commonly found in it. However, a vintage color palette was not chosen, as it was desired to express the freshness and youthfulness of college life. The stripe design brought about by mouse dragging represents the keys being pressed, akin to a joyful melody. There is a small garden behind the school library with a piano, where students often go to relax after class. Thus, this concept is a reflection of memories of campus life. Code and Comments123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260// declare variable for fontlet DeliciousHandrawn// upload font files from sketch files - click the arrow at left corner// set up preload function function preload () &#123;// load a font file from Fonts folder DeliciousHandrawn = loadFont(&#x27;DeliciousHandrawn.ttf&#x27;)&#125;// Object Array setting// declare variable &quot;Circle&quot;// assigning to it an empty arraylet circles = [];// Object Array setting// declare variable &quot;rects&quot;// assigning to it an empty arraylet rects = [];// declare a variable &quot;type&quot; Equal to 0let type = 0;// declare a variable &quot;_index&quot; Equal to 0let _index = 0;// runs once, at the startfunction setup() &#123; // create a canvas (576 pixels wide &amp; 324 pixels tall) createCanvas(576, 324); // for loop, loop according to the width of the Array// declare a variable &quot;i&quot;// let &quot;i&quot; equal to 0// &quot;i&quot; less than width,loop through the entire array// &quot;i&quot; equal to &quot;i&quot; plus 20 for (let i = 0; i &lt; width; i += 20) &#123; // loop according to the height of the Array// declare a variable &quot;j&quot;// let &quot;j&quot; equal to 0// &quot;j&quot; less than height,loop through the entire array// &quot;j&quot; equal to &quot;j&quot; plus 20 for (let j = 0; j &lt; height; j += 20) &#123; // The new Circle instance is added to the circles array// assigns it to an element in the &quot;circles&quot; array at the index specified by &quot;_index&quot;// i,j is to define the position circles[_index] = new Circle(i, j, type); // &quot;_index&quot;=&quot;index&quot;+1 _index++; // &quot;type&quot;=&quot;type&quot;+1 type++; // if it exceeds 2 (which is the maximum &quot;type&quot; value), it is reset to 0. if (type &gt; 2) &#123; type = 0; &#125; &#125; &#125; // The loop iterates from 0 to 11 and sets the value of each element in the array to a new instance of the Rect class, with a starting x-position of i * 50 (increasing by 50 pixels for each iteration) and a y-position of 0. This creates a row of 12 rectangles horizontally aligned at the top of the canvas.// declare a variable &quot;i&quot;// let &quot;i&quot; equal to 0// &quot;i&quot; less than 12// &quot;i&quot; = &quot;i&quot;+1 for (let i = 0; i &lt; 12; i++) &#123; rects[i] = new Rect(i * 50, 0); &#125; &#125;// loops, after setup has runfunction draw() &#123; // fill canvas background background(255); // Loop according to the length of the Array// set up a variable &quot;i&quot;// let &quot;i&quot; equal to 0// &quot;i&quot; less than &quot; Circle&quot; length,loop through the entire array// &quot;i&quot; =&quot;1&quot;+ 1 for (let i = 0; i &lt; circles.length; i++) &#123; // Run Circle[i].update this function circles[i].update(); // Run Circle[i].show this function circles[i].display(); &#125; // Loop according to the length of the Array// set up a variable &quot;i&quot;// let &quot;i&quot; equal to 0// &quot;i&quot; less than &quot; rects&quot; length,loop through the entire array// &quot;i&quot; =&quot;i&quot;+ 1 for (let i = 0; i &lt; rects.length; i++) &#123; // Run &quot;rects&quot;[i].update this function rects[i].update(); // Run &quot;rects&quot;[i].show this function rects[i].display(); &#125; // The if statement checks whether the frame count is divisible by 180. If so, it randomly selects some circles and sets their isChoose property to true if (frameCount % 180 == 0) &#123; // Loop according to the length of the Array// set up a variable &quot;i&quot;// let &quot;i&quot; equal to 0// &quot;i&quot; less than &quot; Circle&quot; length,loop through the entire array// &quot;i&quot; =&quot;1&quot;+ 1 for (let i = 0; i &lt; circles.length; i++) &#123; // For each circle, a random integer between 0 and 2 (inclusive) is generated using the random() function and then rounded down to the nearest integer using the int() function. If the resulting integer is 0, then the isChoose property of the circle is set to true. if (int(random(3)) == 0) &#123; circles[i].isChoose = true; &#125; &#125; &#125; // text align in the center of canvas textAlign(CENTER);// fill color(r,g,b,alpha)// alpha for fadeing the color fill(255,2,0, 200); // set font size in 27 textSize(50); // set font textFont(DeliciousHandrawn)// display text text(&quot;RMIT&quot;, width / 2, height / 2.5); text(&quot;Creative Coding Specialisation&quot;, width / 2, height / 1.8); &#125;// create a class name &quot;Circle&quot; class Circle &#123; // create a function in the class name &quot;constructor&quot;// (parameter x,y,tepe) constructor(x, y, type) &#123;// sets the x-position of the circle to the value of the x parameter passed into the constructor. this.x = x;// sets the y-position of the circle to the value of the y parameter passed into the constructor. this.y = y; // sets the type of the circle to the value of the type parameter passed into the constructor. this.type = type; // sets the isChoose property of the circle to false, indicating that the circle is not currently selected. this.isChoose = false; // sets the starting transparency of the circle to 180 (out of 255) this._alpha = 180; // sets the rate at which the circle&#x27;s size changes over time. this.rC = 0.08; // sets the initial size of the circle to 10 pixels. this.r = 10; &#125; display() &#123;// no outline noStroke();// call function ellipse(x cordinate increace 5, y cordinate increase 5, this r is this radius) ellipse(this.x + 5, this.y + 5, this.r, this.r); &#125; // update function update() &#123; // if statement checks the type variable and sets the color fill accordingly if (this.type == 0) &#123; fill(252, 226, 61, this._alpha); &#125; else if (this.type == 1) &#123; fill(240, 230, 167, this._alpha); &#125; else if (this.type == 2) &#123; fill(167, 200, 196, this._alpha); &#125; // If the isChoose variable is true, it increases the r variable by rC which is initially set to 0.08. If r exceeds 15, rC is multiplied by -1 which means the radius starts decreasing. If r becomes less than or equal to 10, r is set back to 10, rC is set back to 0.08, and isChoose is set back to false. if (this.isChoose) &#123; this.r += this.rC; if (this.r &gt; 15) &#123; this.rC *= -1; &#125; if (this.r &lt;= 10) &#123; this.r = 10; this.rC = 0.08; this.isChoose = false; &#125;// The _alpha variable is set to a value mapped from the r value, between 10 and 15, to the range of 0 and 255. The value is constrained to a minimum of 180 and a maximum of 255. this._alpha = constrain(map(this.r, 10, 15, 0, 255), 180, 255); &#125; &#125; &#125;// create a class name &quot;Rect&quot; class Rect &#123;// The constructor() method initializes the x, y, and _alpha variables. constructor(x, y) &#123; this.x = x; this.y = y; this._alpha = 255; &#125;// The display() method draws a rectangle using the rect() function, with a width of 40 and the height of the canvas. display() &#123; noStroke(); rect(this.x, this.y, 40, height); &#125;// The update() method sets the fill color using fill(), with an initial value of r,g,b and an alpha value of _alpha. update() &#123; fill(236, 246, 231, this._alpha); // Checks if the difference between pmouseX and mouseX is greater than 20, and if the absolute difference between mouseX and this.x+20 is less than or equal to 20. If so, it sets the _alpha variable to 255. Otherwise, it decreases the _alpha variable by 10.Finally, it checks if _alpha is less than 0 and sets it back to 0 if so. if (abs(pmouseX - mouseX) &gt; 20 &amp;&amp; abs(mouseX - (this.x + 20)) &lt;= 20) &#123; this._alpha = 255; &#125; else &#123; this._alpha -= 10; &#125; if (this._alpha &lt; 0) &#123; this._alpha = 0; &#125; &#125;&#125; Reference LinksThomas Capogreco Blog The Coding Train - CODE! PROGRAMMING WITH P5.JS","categories":[],"tags":[{"name":"Assignments 1 p5 Sketch - Banner Design","slug":"Assignments-1-p5-Sketch-Banner-Design","permalink":"https://ariaranya.github.io/tags/Assignments-1-p5-Sketch-Banner-Design/"}]},{"title":"Creative Coding - Practice 3","slug":"25","date":"2023-03-25T01:09:09.000Z","updated":"2023-06-09T18:22:50.077Z","comments":true,"path":"25.html","link":"","permalink":"https://ariaranya.github.io/25.html","excerpt":"","text":"ConceptFollow the tutorial from the Coding Train challenge. This maze pattern is inspired by the book ‘10 PRINT CHR$(205.5+RND(1)); : GOTO 10.’ “The book uses a single line of code – the extremely concise BASIC program for the Commodore 64 inscribed in the title – as a lens through which to explore the phenomenon of creative computing and the role of computer programs in culture”, as described in the book’s introduction.I made some modifications to the settings, such as the style and elements, and also incorporated interactive design. When the mouse is clicked, the color will randomly change. Code and Comments12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273// initialize variables// set a varible &quot;col&quot;let col;// x coordinate equals 0, start point of lineslet x = 0;// y coordinate equals 0, start point of lineslet y = 0;//set variable &quot;spacing&quot;, represents the distance between each line is 20let spacing = 20;// runs once, at the startfunction setup() &#123; // create a canvas in 400 pixels wide and 400 pixels tall createCanvas(400, 400);// set background colour - white background(255);// the &quot;col&quot; variable is initialized to a random color using the &quot;color()&quot; function and &quot;random()&quot; values for red, green, and blue col = color(random(255), random(255), random(255));&#125;// loops, after setup has runfunction draw() &#123; // sets the color of the lines to the value of &quot;col&quot; stroke(col);// The if statement randomly decides whether to draw a line from top-left to bottom-right or from top-right to bottom-left.// If the random number is less than 0.5, it is true, then excutes the frist line function if (random(1) &lt; 0.5) &#123; // draw a line that slopes from top-left to bottom-right. line(x, y, x + spacing, y + spacing); &#125;// otherwise, if the random number is greater or equal to 0.5, then excutes following else &#123;// draw a line that slopes from top-right to bottom-left. line(x, y + spacing, x + spacing, y); &#125;// The x variable is incremented by spacing at the end of each iteration of the loop, which moves the drawing position to the right by spacing pixels. x = x + spacing;// if x postion is greater than the width of canvas if (x &gt; width) &#123;// reset &quot;x&quot; back to 0 x = 0;// then move down to keep drawing y = y + spacing; &#125;&#125;// when mouse pressed at the canvas, reset the lines and colorfunction mousePressed() &#123;// fill background colour - white background(255);// the postion of &quot;x&quot; back to 0 x = 0;// the position of &quot;y&quot; back to 0 y = 0;// the &quot;col&quot; variable is initialized to a random color using the &quot;color()&quot; function and &quot;random()&quot; values for red, green, and blue col = color(random(255), random(255), random(255));&#125; Reference LinksThe Coding Train - Coding Challenge #76: 10PRINT in p5.js The Coding Train - CODE! PROGRAMMING WITH P5.JS","categories":[],"tags":[{"name":"Practice - Print Pattern","slug":"Practice-Print-Pattern","permalink":"https://ariaranya.github.io/tags/Practice-Print-Pattern/"}]},{"title":"Creative Coding - Practice 2","slug":"23","date":"2023-03-23T01:09:09.000Z","updated":"2023-06-09T18:22:50.077Z","comments":true,"path":"23.html","link":"","permalink":"https://ariaranya.github.io/23.html","excerpt":"","text":"ConceptThis exercise involves creating a bouncing ball animation that incorporates several important programming concepts such as arrays, conditional logic, and classes. The colorful ball changes color randomly as it bounces, adding a dynamic visual effect to the animation. Code and Comments123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110// Object Array setting// declare variable &quot;balls&quot;// assigning to it an empty arraylet balls = [];// runs once, at the startfunction setup() &#123; // create a canvas in 600 pixels wide and 600 pixels tall createCanvas(600, 600);// Ball objects using a for loop.// set up a variable &quot;i&quot;// let &quot;i&quot; equal to 0// &quot;i&quot; less than 4,loop through the entire array// &quot;i&quot;= &quot;i&quot; + 1 for (let i = 0; i &lt; 4; i++) &#123; // Each Ball object is added to the balls array. balls[i] = new Ball(); &#125;&#125;// loops, after setup has runfunction draw() &#123;// fill background colour - white background(255); // set up a variable &quot;i&quot;// let &quot;i&quot; equal to 0// &quot;i&quot; less than 4,loop through the entire array// &quot;i&quot;= &quot;i&quot; + 1 for (let i = 0; i &lt; 4; i++) &#123;// run ball[i], display this function balls[i].display(); // run ball[i], update this function balls[i].update(); &#125;&#125;// creates a class named &quot;Ball&quot;class Ball &#123; // create a function in the class name &quot;constructor&quot;, it initializes the properties of the ball object with the following values constructor() &#123;// this.x = the centre of canvas width this.x = width / 2; // this.y = the centre of canvas height this.y = height / 2; // this.vx = random number between -3 and 3 - the velocity of the ball in x position this.vx = random(-3, 3); // this.vx = random number between -3 and 3 - the velocity of the ball in y position this.vy = random(-3, 3);// the &quot;col&quot; variable is initialized to a random color using the &quot;color()&quot; function and &quot;random()&quot; values for red, green, and blue this.col = color(random(255), random(255), random(255)); &#125;// creates a &quot;display&quot; function in the class // dislay balls display() &#123; // no out lines noStroke(); // fill the colour &quot;this,col&quot; to balls - random colour fill(this.col); // draw balls at this.x position and this.y position with diameter 40 ellipse(this.x, this.y, 40, 40); &#125;// creates a &quot;updates&quot; function in the class // updating the position of balls update() &#123; // if this.x positon is less than 0 or thi.x position is grater than the width of canvas if (this.x &lt; 0 || this.x &gt; width) &#123; // change to a random colour then fill in the ball this.col = color(random(255), random(255), random(255)); // this.vx = this.vx * -1 this.vx *= -1; &#125;// if this.y positon is less than 0 or thi.x position is grater than the height of canvas if (this.y &lt; 0 || this.y &gt; height) &#123; // change to a random colour then fill in the ball this.col = color(random(255), random(255), random(255)); // this.vy = this.vy * -1 this.vy *= -1; &#125; // this.x = this.x + this.vx this.x += this.vx; // this.y = this.y + this.vy this.y += this.vy; &#125;&#125; Reference LinksThomas Capogreco Blog The Coding Train - 3.2: The Bouncing Ball - p5.js Tutorial The Coding Train - CODE! PROGRAMMING WITH P5.JS","categories":[],"tags":[{"name":"Practice - Bouncing balls","slug":"Practice-Bouncing-balls","permalink":"https://ariaranya.github.io/tags/Practice-Bouncing-balls/"}]},{"title":"Creative Coding - Practice 1","slug":"hello-world","date":"2023-03-17T16:00:00.000Z","updated":"2023-06-09T18:22:50.077Z","comments":true,"path":"hello-world.html","link":"","permalink":"https://ariaranya.github.io/hello-world.html","excerpt":"","text":"ConceptThis exercise involves creating a polka dot pattern that changes the background color as the mouse moves. It uses the loop(). andmap(). concepts from the Coding Train tutorial. However, instead of using random colors, I chose to create a gradient of two colors using lerpColor(). This adds an interactive element to the polka dot pattern and makes it more engaging. Code and Comments1234567891011121314151617181920212223242526272829303132333435363738394041424344454647// The variables of r and b are set to specific RGB valueslet g = 226;let b = 216;// runs once, at the startfunction setup() &#123;// create canvas in 600 pixels wide and 600 pixels tall createCanvas(600, 600);// no outline noStroke();&#125;// loops, after setup has run function draw() &#123; // declares a variable &quot; bg&quot; // &quot;bg&quot; equals the result of lerpColor function// &quot;lerpColor() &quot;function is called to create a dynamic background color that changes based on the position of the mouse. let bg = lerpColor( // set start color - white color(255, 255, 255), // set end color - lgiht green color(175, 222, 191), // mouseX is the horizontal position of the mouse. the width variable represents the width of the canvas.//mouseX dived width - the result means the &quot;position&quot; between the start and end colors. mouseX / width);// set background colour as &quot;bg&quot; value background(bg);// nested &quot;for&quot; loop, starting at y coordinate 22 and ending at the height of the canvas, with a spacing of 55 pixels between each row. for (let y = 22; y &lt; height; y += 55) &#123;// nested &quot;for&quot; loop, tarting at x coordinate 22 and ending at the width of the canvas, with a spacing of 55 pixels between each column. for (let x = 22; x &lt; width; x += 55) &#123;// fill colour into circles - yellow fill(225, 204, 0);// calling &quot;ellipse&quot; function to draw a circle at each x,y position specified by the loop variables x and y, with a radius of 20 pixels. ellipse(x, y, 20); &#125; &#125;&#125; Reference LinksThe Coding Train - The map() Function - p5.js Tutorial The Coding Train - 4.2: Nested Loops - p5.js Tutorial The Coding Train - CODE! PROGRAMMING WITH P5.JS","categories":[],"tags":[{"name":"Practice - Dots pattern with background colour changes","slug":"Practice-Dots-pattern-with-background-colour-changes","permalink":"https://ariaranya.github.io/tags/Practice-Dots-pattern-with-background-colour-changes/"}]}],"categories":[],"tags":[{"name":"AT3","slug":"AT3","permalink":"https://ariaranya.github.io/tags/AT3/"},{"name":"AT2","slug":"AT2","permalink":"https://ariaranya.github.io/tags/AT2/"},{"name":"Practice - Bubble 2","slug":"Practice-Bubble-2","permalink":"https://ariaranya.github.io/tags/Practice-Bubble-2/"},{"name":"Practice -","slug":"Practice","permalink":"https://ariaranya.github.io/tags/Practice/"},{"name":"Practice - bubbles","slug":"Practice-bubbles","permalink":"https://ariaranya.github.io/tags/Practice-bubbles/"},{"name":"Practice - rainning day","slug":"Practice-rainning-day","permalink":"https://ariaranya.github.io/tags/Practice-rainning-day/"},{"name":"Practice - flow filed","slug":"Practice-flow-filed","permalink":"https://ariaranya.github.io/tags/Practice-flow-filed/"},{"name":"Assignments 1 p5 Sketch - Banner Design","slug":"Assignments-1-p5-Sketch-Banner-Design","permalink":"https://ariaranya.github.io/tags/Assignments-1-p5-Sketch-Banner-Design/"},{"name":"Practice - Print Pattern","slug":"Practice-Print-Pattern","permalink":"https://ariaranya.github.io/tags/Practice-Print-Pattern/"},{"name":"Practice - Bouncing balls","slug":"Practice-Bouncing-balls","permalink":"https://ariaranya.github.io/tags/Practice-Bouncing-balls/"},{"name":"Practice - Dots pattern with background colour changes","slug":"Practice-Dots-pattern-with-background-colour-changes","permalink":"https://ariaranya.github.io/tags/Practice-Dots-pattern-with-background-colour-changes/"}]}